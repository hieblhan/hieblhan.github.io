<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Unit Details | 2025 AI</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="style.css">
    <link rel="icon" type="image/x-icon" href="/pic/favicon.ico">
    <style>
        /* Unit Navigation Styles */
        .unit-nav-container {
            position: fixed;
            top: 50%;
            transform: translateY(-50%);
            z-index: 1000;
            pointer-events: none;
        }

        .unit-nav-left {
            left: 20px;
        }

        .unit-nav-right {
            right: 20px;
        }

        .unit-nav-btn {
            background: rgba(255, 107, 157, 0.9);
            color: white;
            border: none;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            cursor: pointer;
            transition: all 0.3s ease;
            pointer-events: auto;
            box-shadow: 0 4px 15px rgba(255, 107, 157, 0.3);
            backdrop-filter: blur(10px);
        }

        .unit-nav-btn:hover {
            background: rgba(255, 107, 157, 1);
            transform: scale(1.1);
            box-shadow: 0 6px 20px rgba(255, 107, 157, 0.4);
        }

        .unit-nav-btn:disabled {
            background: rgba(200, 200, 200, 0.5);
            color: rgba(255, 255, 255, 0.5);
            cursor: not-allowed;
            box-shadow: none;
        }

        .unit-nav-btn:disabled:hover {
            transform: none;
            background: rgba(200, 200, 200, 0.5);
        }

        /* Unit Info Tooltip */
        .unit-nav-tooltip {
            position: absolute;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 0.85rem;
            white-space: nowrap;
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
            z-index: 1001;
        }

        .unit-nav-left .unit-nav-tooltip {
            right: 60px;
            top: 50%;
            transform: translateY(-50%);
        }

        .unit-nav-right .unit-nav-tooltip {
            left: 60px;
            top: 50%;
            transform: translateY(-50%);
        }

        .unit-nav-btn:hover .unit-nav-tooltip {
            opacity: 1;
        }

        /* Unit Counter */
        .unit-counter {
            position: fixed;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(255, 107, 157, 0.9);
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            font-weight: 500;
            z-index: 1000;
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 15px rgba(255, 107, 157, 0.3);
        }

        /* Mobile Responsive */
        @media (max-width: 768px) {
            .unit-nav-container {
                position: fixed;
                top: auto;
                bottom: 100px;
                transform: none;
            }

            .unit-nav-left {
                left: 20px;
            }

            .unit-nav-right {
                right: 20px;
            }

            .unit-nav-btn {
                width: 45px;
                height: 45px;
                font-size: 1rem;
            }

            .unit-nav-tooltip {
                display: none;
            }

            .unit-counter {
                bottom: 20px;
                padding: 8px 16px;
                font-size: 0.9rem;
            }
        }

        /* Keyboard Navigation Hint */
        .keyboard-hint {
            position: fixed;
            top: 120px;
            right: 20px;
            background: rgba(255, 255, 255, 0.9);
            padding: 10px 15px;
            border-radius: 10px;
            font-size: 0.8rem;
            color: #666;
            z-index: 999;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 107, 157, 0.2);
            opacity: 0;
            animation: fadeInHint 0.5s ease 2s forwards;
        }

        @keyframes fadeInHint {
            to { opacity: 1; }
        }

        .keyboard-hint .hint-close {
            position: absolute;
            top: -5px;
            right: 5px;
            background: none;
            border: none;
            font-size: 1rem;
            color: #999;
            cursor: pointer;
        }

        @media (max-width: 768px) {
            .keyboard-hint {
                display: none;
            }
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg fixed-top">
        <div class="container">
            <a class="navbar-brand" href="index.html">2025 AI</a>

            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="index.html#home">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="index.html#about">About Me</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="index.html#projects">My Projects</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="index.html#contact">Contact Me</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Unit Navigation - Left -->
    <div class="unit-nav-container unit-nav-left">
        <button class="unit-nav-btn" id="prevUnitBtn" onclick="navigateToUnit(currentUnit - 1)">
            <i class="fas fa-chevron-left"></i>
            <div class="unit-nav-tooltip" id="prevUnitTooltip">Unit 1</div>
        </button>
    </div>

    <!-- Unit Navigation - Right -->
    <div class="unit-nav-container unit-nav-right">
        <button class="unit-nav-btn" id="nextUnitBtn" onclick="navigateToUnit(currentUnit + 1)">
            <i class="fas fa-chevron-right"></i>
            <div class="unit-nav-tooltip" id="nextUnitTooltip">Unit 3</div>
        </button>
    </div>

    <!-- Unit Counter -->
    <div class="unit-counter" id="unitCounter">
        Unit 1 / 20
    </div>

    <!-- Keyboard Navigation Hint -->
    <div class="keyboard-hint" id="keyboardHint">
        <button class="hint-close" onclick="closeHint()">&times;</button>
        üí° Use ‚Üê ‚Üí keys to quickly switch Units
    </div>

    <!-- Project Header -->
    <section class="project-header">
        <div class="container">
            <a href="index.html#projects" class="back-btn">
                <i class="fas fa-arrow-left"></i>
                <span>Back to Project List</span>
            </a>

            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="index.html">Home</a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="index.html#projects">Projects</a>
                    </li>
                    <li class="breadcrumb-item active" id="breadcrumb-unit">Unit</li>
                </ol>
            </nav>

            <h1 class="project-title" id="project-title">Unit</h1>
            <p class="project-subtitle" id="project-subtitle">
                Unit Assignment
            </p>
        </div>
    </section>

    <!-- Main Content -->
    <div class="container">
        <!-- Image Gallery -->
        <section class="content-section fade-in">
            <h2 class="section-title">Assignment Gallery</h2>
            <div class="image-gallery">
                <div class="gallery-grid" id="gallery-grid">
                    <!-- Images will be dynamically generated -->
                </div>
            </div>
        </section>
    </div>

    <!-- Image Modal -->
    <div class="modal fade" id="imageModal" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="imageModalTitle">Project Image</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body text-center">
                    <img id="modalImage" src="" alt="Project Image" class="img-fluid">
                    <p class="mt-3" id="imageDescription"></p>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentUnit = 1;
        let images = [];
        const totalUnits = 20;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Get unit number from URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            currentUnit = parseInt(urlParams.get('unit')) || 1;

            // Validate unit number (1-20)
            if (currentUnit < 1 || currentUnit > totalUnits) {
                currentUnit = 1;
            }

            // Update page title and content
            updatePageContent();

            // Generate images for this unit
            generateImages();

            // Render gallery
            renderGallery();

            // Update navigation
            updateNavigation();

            initScrollAnimations();
            initKeyboardNavigation();
        });

        // Unit information with names and attributes
        const unitInfo = {
            1: { name: "Web Scraping, MediaPipe, Environment", attributes: ["Other Tools Projects", "Perception AI"] },
            2: { name: "CV2", attributes: ["Other Tools Projects"] },
            3: { name: "Object Detection", attributes: ["Perception AI"] },
            4: { name: "Image Segmentation", attributes: ["Perception AI"] },
            5: { name: "Face Detection", attributes: ["Perception AI"] },
            6: { name: "Face Landmark Detection", attributes: ["Perception AI"] },
            7: { name: "Pose Landmark Detection", attributes: ["Perception AI"] },
            8: { name: "Hand Landmarks", attributes: ["Perception AI"] },
            9: { name: "Gesture Recognition", attributes: ["Perception AI"] },
            10: { name: "Streamlit", attributes: ["Other Tools Projects"] },
            11: { name: "Local LLM", attributes: ["Generative AI"] },
            12: { name: "Neural Style Transfer", attributes: ["Generative AI"] },
            13: { name: "Torch", attributes: ["Generative AI"] },
            14: { name: "Arbitrary-image Real time NST", attributes: ["Generative AI"] },
            15: { name: "YOLO", attributes: ["Perception AI"] },
            16: { name: "Using Python call LLM API", attributes: ["Generative AI"] },
            17: { name: "Building LLM from Scratch", attributes: ["Generative AI"] },
            18: { name: "RAG Introduction, LangChain", attributes: ["Generative AI"] },
            19: { name: "AI Agent, MCP, n8n", attributes: ["Agentic AI"] },
            20: { name: "Advanced n8n", attributes: ["Agentic AI"] }
        };

        // Navigate to specific unit
        function navigateToUnit(unitNumber) {
            if (unitNumber >= 1 && unitNumber <= totalUnits && unitNumber !== currentUnit) {
                window.location.href = `unit.html?unit=${unitNumber}`;
            }
        }

        // Update navigation buttons and tooltips
        function updateNavigation() {
            const prevBtn = document.getElementById('prevUnitBtn');
            const nextBtn = document.getElementById('nextUnitBtn');
            const prevTooltip = document.getElementById('prevUnitTooltip');
            const nextTooltip = document.getElementById('nextUnitTooltip');
            const unitCounter = document.getElementById('unitCounter');

            // Update counter
            unitCounter.textContent = `Unit ${currentUnit} / ${totalUnits}`;

            // Update previous button
            if (currentUnit > 1) {
                prevBtn.disabled = false;
                const prevUnit = unitInfo[currentUnit - 1];
                prevTooltip.textContent = `Unit ${currentUnit - 1}: ${prevUnit.name}`;
            } else {
                prevBtn.disabled = true;
                prevTooltip.textContent = 'Already the first Unit';
            }

            // Update next button
            if (currentUnit < totalUnits) {
                nextBtn.disabled = false;
                const nextUnit = unitInfo[currentUnit + 1];
                nextTooltip.textContent = `Unit ${currentUnit + 1}: ${nextUnit.name}`;
            } else {
                nextBtn.disabled = true;
                nextTooltip.textContent = 'Already the last Unit';
            }
        }

        // Initialize keyboard navigation
        function initKeyboardNavigation() {
            document.addEventListener('keydown', function(e) {
                // Ignore if user is typing in an input field
                if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {
                    return;
                }

                switch(e.key) {
                    case 'ArrowLeft':
                        e.preventDefault();
                        if (currentUnit > 1) {
                            navigateToUnit(currentUnit - 1);
                        }
                        break;
                    case 'ArrowRight':
                        e.preventDefault();
                        if (currentUnit < totalUnits) {
                            navigateToUnit(currentUnit + 1);
                        }
                        break;
                    case 'Home':
                        e.preventDefault();
                        navigateToUnit(1);
                        break;
                    case 'End':
                        e.preventDefault();
                        navigateToUnit(totalUnits);
                        break;
                }
            });
        }

        // Close keyboard hint
        function closeHint() {
            document.getElementById('keyboardHint').style.display = 'none';
        }

        // Update page content based on unit number
        function updatePageContent() {
            const unit = unitInfo[currentUnit];
            const unitText = `Unit #${currentUnit}`;
            const unitFullTitle = `${unitText}: ${unit.name}`;
            const subtitleText = `Unit ${currentUnit} Assignment - ${unit.attributes.join(', ')}`;
            const titleText = `${unitFullTitle} - Project Details | 2025 AI`;

            // Update page title
            document.title = titleText;

            // Update breadcrumb
            document.getElementById('breadcrumb-unit').textContent = unitFullTitle;

            // Update project title
            document.getElementById('project-title').textContent = unitFullTitle;

            // Update project subtitle
            document.getElementById('project-subtitle').textContent = subtitleText;
        }

        // Generate images array for current unit
        function generateImages() {
            const unit = unitInfo[currentUnit];
            images = [];
            for (let i = 1; i <= 3; i++) {
                const imageData = {
                    src: `pic/unit${currentUnit}_${i}.jpg`,
                    title: `${unit.name} - Image ${i}`,
                    description: `Unit #${currentUnit}: ${unit.name} Assignment Image ${i} (${unit.attributes.join(', ')})`
                };
                images.push(imageData);
            }
        }

        // Render gallery based on current unit
        function renderGallery() {
            const galleryGrid = document.getElementById('gallery-grid');
            const unit = unitInfo[currentUnit];

            galleryGrid.innerHTML = images.map((image, index) => {
                const title = image.title;
                const fileName = `unit${currentUnit}_${index + 1}`;
                const attributeBadges = unit.attributes.map(attr => {
                    const badgeClass = attr.includes('Perception') ? 'bg-primary' : 
                                     attr.includes('Generative') ? 'bg-success' : 
                                     attr.includes('Agentic') ? 'bg-warning' : 'bg-secondary';
                    return `<span class="badge ${badgeClass} me-1">${attr}</span>`;
                }).join('');

                return `
                    <div class="gallery-item" data-bs-toggle="modal" data-bs-target="#imageModal" onclick="showImage(${index})">
                        <img src="${image.src}" alt="Unit ${currentUnit} - Image ${index + 1}">
                        <div class="gallery-overlay">
                            <h5>${fileName}</h5>
                            <p>${unit.name}</p>
                            <div class="mt-2">${attributeBadges}</div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Show image in modal
        function showImage(index) {
            const image = images[index];
            const modalImage = document.getElementById('modalImage');
            const imageDescription = document.getElementById('imageDescription');

            modalImage.src = image.src;
            imageDescription.textContent = image.description;
        }

        // Scroll animations
        function initScrollAnimations() {
            const observerOptions = {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            };

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('visible');
                    }
                });
            }, observerOptions);

            document.querySelectorAll('.fade-in').forEach(el => {
                observer.observe(el);
            });
        }

        // Smooth scrolling for navigation links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    const headerOffset = 70;
                    const elementPosition = target.getBoundingClientRect().top;
                    const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

                    window.scrollTo({
                        top: offsetPosition,
                        behavior: 'smooth'
                    });
                }
            });
        });

        // Navbar background on scroll
        window.addEventListener('scroll', function() {
            const navbar = document.querySelector('.navbar');
            if (window.scrollY > 50) {
                navbar.style.background = 'rgba(255,255,255,0.98)';
            } else {
                navbar.style.background = 'rgba(255,255,255,0.95)';
            }
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            fetch(`YoutubeLink/unit${currentUnit}.txt`)
                .then(response => {
                    if (!response.ok) throw new Error("No YouTube link found.");
                    return response.text();
                })
                .then(text => {
                    const firstLine = text.trim().split('\n')[0];
                    if (firstLine.includes("youtube") || firstLine.includes("youtu.be")) {
                        const videoId = firstLine.includes("youtu.be")
                            ? firstLine.split("youtu.be/")[1]
                            : firstLine.split("v=")[1].split("&")[0];
                        const iframeHTML = `
                            <div class="container mt-5 mb-5">
                                <div class="ratio ratio-16x9">
                                    <iframe src="https://www.youtube.com/embed/${videoId}" 
                                            title="YouTube video" allowfullscreen></iframe>
                                </div>
                            </div>`;
                        document.body.insertAdjacentHTML("beforeend", iframeHTML);
                    }
                })
                .catch(err => {
                    console.log("No YouTube video for this unit.");
                });
        });
    </script>

</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Smart Assistant</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="icon" type="image/x-icon" href="/pic/favicon.ico">
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #ff6b9d 0%, #c44569 100%);
            --secondary-gradient: linear-gradient(135deg, #ff9ac1 0%, #e91e63 100%);
            --tertiary-gradient: linear-gradient(135deg, #ffb3d1 0%, #ff4081 100%);
            --chat-bg: linear-gradient(135deg, #ffeef4 0%, #ffe0eb 100%);
            --user-bubble: linear-gradient(135deg, #ff6b9d 0%, #c44569 100%);
            --ai-bubble: linear-gradient(135deg, #ff9ac1 0%, #e91e63 100%);
            --accent-pink: #ff6b9d;
            --deep-pink: #c44569;
            --light-pink: #ffcce0;
            --ultra-light-pink: #fef7fa;
        }

        body {
            background: linear-gradient(135deg, #ff6b9d 0%, #c44569 50%, #ff9ac1 100%);
            background-size: 400% 400%;
            animation: gradientShift 8s ease infinite;
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .chat-container {
            background: white;
            border-radius: 25px;
            box-shadow: 0 30px 80px rgba(255, 107, 157, 0.3);
            overflow: hidden;
            max-width: 800px;
            margin: 2rem auto;
            min-height: 600px;
            display: flex;
            flex-direction: column;
            backdrop-filter: blur(20px);
            border: 3px solid rgba(255, 182, 193, 0.3);
            animation: containerFloat 6s ease-in-out infinite;
            position: relative;
        }

        @keyframes containerFloat {
            0%, 100% { transform: translateY(0px) scale(1); }
            50% { transform: translateY(-5px) scale(1.01); }
        }

        .chat-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.1) 50%, transparent 70%);
            animation: shimmerEffect 3s infinite;
            pointer-events: none;
            z-index: 1;
        }

        @keyframes shimmerEffect {
            0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
            100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }

        .chat-header {
            background: var(--primary-gradient);
            color: white;
            padding: 2rem;
            text-align: center;
            position: relative;
            overflow: hidden;
            z-index: 2;
        }

        .chat-header::before {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #ff6b9d, #c44569, #ff9ac1, #e91e63, #ff6b9d);
            background-size: 300% 300%;
            animation: rainbowFlow 4s linear infinite;
        }

        @keyframes rainbowFlow {
            0% { background-position: 0% 50%; }
            100% { background-position: 300% 50%; }
        }

        .chat-header::after {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            animation: headerShimmer 4s infinite;
        }

        @keyframes headerShimmer {
            0% { left: -100%; }
            100% { left: 100%; }
        }

        .chat-header h1 {
            margin: 0;
            font-size: 2rem;
            font-weight: 700;
            animation: titlePulse 3s ease-in-out infinite;
            position: relative;
            z-index: 3;
        }

        @keyframes titlePulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.02); }
        }

        .chat-status {
            font-size: 1rem;
            opacity: 0.95;
            margin-top: 0.8rem;
            animation: statusFloat 2s ease-in-out infinite;
            position: relative;
            z-index: 3;
        }

        @keyframes statusFloat {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-2px); }
        }

        .chat-messages {
            flex: 1;
            padding: 2rem;
            background: var(--chat-bg);
            overflow-y: auto;
            max-height: 400px;
            position: relative;
        }

        .chat-messages::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-image: 
                radial-gradient(circle at 20% 20%, rgba(255, 107, 157, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 80%, rgba(196, 69, 105, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 40% 60%, rgba(255, 182, 193, 0.1) 0%, transparent 50%);
            pointer-events: none;
            animation: backgroundPulse 6s ease-in-out infinite;
        }

        @keyframes backgroundPulse {
            0%, 100% { opacity: 0.3; }
            50% { opacity: 0.6; }
        }

        .message {
            margin-bottom: 2rem;
            display: flex;
            animation: messageSlideIn 0.6s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            z-index: 1;
        }

        @keyframes messageSlideIn {
            from {
                opacity: 0;
                transform: translateY(30px) scale(0.9);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        .message.user {
            justify-content: flex-end;
        }

        .message.ai {
            justify-content: flex-start;
        }

        .message-bubble {
            max-width: 70%;
            padding: 1.2rem 1.8rem;
            border-radius: 25px;
            color: white;
            font-size: 1rem;
            line-height: 1.6;
            position: relative;
            box-shadow: 0 10px 40px rgba(255, 107, 157, 0.3);
            backdrop-filter: blur(10px);
            animation: bubbleGlow 3s ease-in-out infinite;
        }

        @keyframes bubbleGlow {
            0%, 100% { 
                box-shadow: 0 10px 40px rgba(255, 107, 157, 0.3);
            }
            50% { 
                box-shadow: 0 15px 50px rgba(255, 107, 157, 0.5);
            }
        }

        .message.user .message-bubble {
            background: var(--user-bubble);
            border-bottom-right-radius: 8px;
        }

        .message.user .message-bubble::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(255,255,255,0.2), transparent);
            border-radius: inherit;
        }

        .message.ai .message-bubble {
            background: var(--ai-bubble);
            border-bottom-left-radius: 8px;
            color: white;
        }

        .message.ai .message-bubble::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(255,255,255,0.1), transparent);
            border-radius: inherit;
        }

        .message-avatar {
            width: 45px;
            height: 45px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 1rem;
            font-size: 1.3rem;
            box-shadow: 0 8px 25px rgba(255, 107, 157, 0.4);
            animation: avatarBounce 2s ease-in-out infinite;
        }

        @keyframes avatarBounce {
            0%, 100% { transform: translateY(0) scale(1); }
            50% { transform: translateY(-3px) scale(1.05); }
        }

        .message.user .message-avatar {
            background: var(--user-bubble);
            color: white;
            order: 2;
        }

        .message.ai .message-avatar {
            background: var(--ai-bubble);
            color: white;
        }

        .chat-input-area {
            padding: 2rem;
            background: white;
            border-top: 3px solid var(--light-pink);
            position: relative;
        }

        .chat-input-area::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: var(--primary-gradient);
            background-size: 200% 100%;
            animation: borderFlow 3s linear infinite;
        }

        @keyframes borderFlow {
            0% { background-position: 0% 0; }
            100% { background-position: 200% 0; }
        }

        .input-group {
            position: relative;
        }

        .form-control {
            border: 3px solid var(--light-pink);
            border-radius: 30px;
            padding: 1.2rem 2rem;
            font-size: 1.1rem;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            background: var(--ultra-light-pink);
            box-shadow: inset 0 2px 10px rgba(255, 107, 157, 0.1);
        }

        .form-control:focus {
            border-color: var(--accent-pink);
            box-shadow: 0 0 30px rgba(255, 107, 157, 0.3);
            background: white;
            transform: translateY(-2px);
        }

        .btn-send {
            background: var(--primary-gradient);
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-left: 0.8rem;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 8px 30px rgba(255, 107, 157, 0.4);
            position: relative;
            overflow: hidden;
        }

        .btn-send::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            transition: left 0.6s;
        }

        .btn-send:hover {
            transform: translateY(-4px) scale(1.1);
            box-shadow: 0 15px 40px rgba(255, 107, 157, 0.6);
            animation: buttonPulse 0.8s infinite;
        }

        .btn-send:hover::before {
            left: 100%;
        }

        @keyframes buttonPulse {
            0%, 100% { transform: translateY(-4px) scale(1.1); }
            50% { transform: translateY(-6px) scale(1.15); }
        }

        .btn-send:disabled {
            opacity: 0.6;
            transform: none;
            animation: none;
        }

        .typing-indicator {
            display: flex;
            align-items: center;
            padding: 1.2rem 2rem;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 25px;
            margin-bottom: 1.5rem;
            backdrop-filter: blur(15px);
            box-shadow: 0 8px 30px rgba(255, 107, 157, 0.2);
            animation: typingFloat 2s ease-in-out infinite;
            border: 2px solid var(--light-pink);
        }

        @keyframes typingFloat {
            0%, 100% { transform: translateY(0) scale(1); }
            50% { transform: translateY(-3px) scale(1.02); }
        }

        .typing-dots {
            display: flex;
            gap: 6px;
            margin-left: 0.8rem;
        }

        .typing-dot {
            width: 10px;
            height: 10px;
            background: var(--primary-gradient);
            border-radius: 50%;
            animation: typingAnimation 1.4s infinite ease-in-out;
            box-shadow: 0 2px 10px rgba(255, 107, 157, 0.3);
        }

        .typing-dot:nth-child(1) { animation-delay: -0.32s; }
        .typing-dot:nth-child(2) { animation-delay: -0.16s; }

        @keyframes typingAnimation {
            0%, 80%, 100% {
                transform: scale(0.8);
                opacity: 0.5;
            }
            40% {
                transform: scale(1.2);
                opacity: 1;
            }
        }

        .welcome-message {
            text-align: center;
            color: var(--deep-pink);
            padding: 3rem;
            font-style: italic;
            animation: welcomePulse 4s ease-in-out infinite;
        }

        @keyframes welcomePulse {
            0%, 100% { transform: scale(1); opacity: 0.8; }
            50% { transform: scale(1.05); opacity: 1; }
        }

        .welcome-message i {
            font-size: 4rem;
            margin-bottom: 1.5rem;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            animation: iconSpin 8s linear infinite;
        }

        @keyframes iconSpin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .error-message {
            background: linear-gradient(135deg, #ff6b6b 0%, #ff8e8e 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            margin: 1.5rem 0;
            text-align: center;
            animation: errorShake 0.6s ease-in-out, errorFade 3s ease-in-out;
            box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
        }

        @keyframes errorShake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-8px); }
            75% { transform: translateX(8px); }
        }

        @keyframes errorFade {
            0%, 80% { opacity: 1; }
            100% { opacity: 0; }
        }

        .connection-status {
            position: absolute;
            top: 15px;
            right: 25px;
            display: flex;
            align-items: center;
            gap: 0.8rem;
            font-size: 0.9rem;
            z-index: 10;
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #4ecdc4;
            animation: statusPulse 2s infinite;
            box-shadow: 0 0 20px rgba(78, 205, 196, 0.6);
        }

        .status-indicator.disconnected {
            background: #ff6b6b;
            animation: statusBlink 1s infinite;
            box-shadow: 0 0 20px rgba(255, 107, 107, 0.6);
        }

        @keyframes statusPulse {
            0%, 100% { 
                opacity: 1; 
                transform: scale(1);
            }
            50% { 
                opacity: 0.5; 
                transform: scale(1.2);
            }
        }

        @keyframes statusBlink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0.3; }
        }

        /* Enhanced scrollbar */
        .chat-messages::-webkit-scrollbar {
            width: 8px;
        }

        .chat-messages::-webkit-scrollbar-track {
            background: var(--light-pink);
            border-radius: 10px;
        }

        .chat-messages::-webkit-scrollbar-thumb {
            background: var(--primary-gradient);
            border-radius: 10px;
            transition: all 0.3s;
        }

        .chat-messages::-webkit-scrollbar-thumb:hover {
            background: var(--secondary-gradient);
            transform: scale(1.1);
        }

        @media (max-width: 768px) {
            .chat-container {
                margin: 1rem;
                border-radius: 20px;
                min-height: calc(100vh - 2rem);
            }
            
            .message-bubble {
                max-width: 85%;
                padding: 1rem 1.5rem;
            }
            
            .chat-messages {
                padding: 1.5rem;
            }

            .chat-header h1 {
                font-size: 1.6rem;
            }

            .btn-send {
                width: 50px;
                height: 50px;
            }
        }

        /* Additional sparkle animations */
        .chat-header .fas.fa-sparkles {
            animation: sparkle 2s ease-in-out infinite;
        }

        @keyframes sparkle {
            0%, 100% { 
                transform: scale(1) rotate(0deg);
                color: rgba(255,255,255,0.8);
            }
            50% { 
                transform: scale(1.2) rotate(180deg);
                color: rgba(255,255,255,1);
            }
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="chat-container">
            <div class="chat-header">
                <div class="connection-status">
                    <div class="status-indicator" id="statusIndicator"></div>
                    <span id="statusText">Connected</span>
                </div>
                <h1><i class="fas fa-robot me-2"></i>AI Smart Assistant</h1>
                <div class="chat-status">
                    <i class="fas fa-sparkles me-1"></i>
                    N8N + Gemini + Memory + SerpAPI Intelligent Conversation System
                </div>
            </div>

            <div class="chat-messages" id="chatMessages">
                <div class="welcome-message">
                    <i class="fas fa-comments"></i>
                    <h4>Welcome to AI Assistant!</h4>
                    <p>I'm your intelligent assistant, ready to help you answer questions, search for information, or engage in natural conversation.</p>
                    <p>Please enter your questions or thoughts, let's start chatting!</p>
                </div>
            </div>

            <div class="chat-input-area">
                <div class="input-group">
                    <input type="text" 
                           class="form-control" 
                           id="messageInput" 
                           placeholder="Type your message..."
                           autocomplete="off">
                    <button class="btn btn-send" 
                            id="sendButton" 
                            type="button">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
                <div class="mt-2 text-muted small text-center">
                    <i class="fas fa-info-circle me-1"></i>
                    Press Enter to send message quickly
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
    <script>
        class ChatInterface {
            constructor() {
                this.sessionId = this.generateSessionId();
                this.isTyping = false;
                this.webhookUrl = ''; // Please set your N8N webhook URL here
                
                this.initializeElements();
                this.bindEvents();
                this.updateConnectionStatus();
            }

            generateSessionId() {
                return 'web_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            }

            initializeElements() {
                this.chatMessages = document.getElementById('chatMessages');
                this.messageInput = document.getElementById('messageInput');
                this.sendButton = document.getElementById('sendButton');
                this.statusIndicator = document.getElementById('statusIndicator');
                this.statusText = document.getElementById('statusText');
            }

            bindEvents() {
                this.sendButton.addEventListener('click', () => this.sendMessage());
                this.messageInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        this.sendMessage();
                    }
                });

                // Auto-adjust input field height
                this.messageInput.addEventListener('input', () => {
                    this.messageInput.style.height = 'auto';
                    this.messageInput.style.height = this.messageInput.scrollHeight + 'px';
                });
            }

            updateConnectionStatus() {
                if (!this.webhookUrl) {
                    this.statusIndicator.classList.add('disconnected');
                    this.statusText.textContent = 'Setup Webhook URL...';
                    this.showError('Setting up N8N webhook URL in program...');
                } else {
                    this.statusIndicator.classList.remove('disconnected');
                    this.statusText.textContent = 'Connected';
                }
            }

            async sendMessage() {
                const message = this.messageInput.value.trim();
                if (!message || this.isTyping) return;

                if (!this.webhookUrl) {
                    this.showError('Please set up N8N webhook URL first');
                    return;
                }

                // Clear welcome message
                const welcomeMessage = this.chatMessages.querySelector('.welcome-message');
                if (welcomeMessage) {
                    welcomeMessage.remove();
                }

                // Add user message
                this.addMessage(message, 'user');
                this.messageInput.value = '';
                this.messageInput.style.height = 'auto';

                // Show typing indicator
                this.showTypingIndicator();

                try {
                    const response = await this.callN8NWebhook(message);
                    this.hideTypingIndicator();
                    
                    if (response.success && response.message) {
                        this.addMessage(response.message, 'ai');
                    } else {
                        throw new Error('Invalid response format');
                    }
                } catch (error) {
                    this.hideTypingIndicator();
                    console.error('Message sending error:', error);
                    this.addMessage('Sorry, an error occurred. Please try again later.', 'ai');
                    this.showError('Connection failed, please check network connection or webhook settings');
                }
            }

            async callN8NWebhook(message) {
                const requestData = {
                    message: message,
                    sessionId: this.sessionId,
                    timestamp: new Date().toISOString()
                };

                const response = await fetch(this.webhookUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData)
                });

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                return await response.json();
            }

            addMessage(text, sender) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${sender}`;

                const avatar = document.createElement('div');
                avatar.className = 'message-avatar';
                avatar.innerHTML = sender === 'user' ? '<i class="fas fa-user"></i>' : '<i class="fas fa-robot"></i>';

                const bubble = document.createElement('div');
                bubble.className = 'message-bubble';
                bubble.textContent = text;

                messageDiv.appendChild(avatar);
                messageDiv.appendChild(bubble);

                this.chatMessages.appendChild(messageDiv);
                this.scrollToBottom();
            }

            showTypingIndicator() {
                this.isTyping = true;
                this.sendButton.disabled = true;

                const typingDiv = document.createElement('div');
                typingDiv.className = 'typing-indicator';
                typingDiv.id = 'typingIndicator';
                typingDiv.innerHTML = `
                    <i class="fas fa-robot"></i>
                    <span>AI is thinking</span>
                    <div class="typing-dots">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                `;

                this.chatMessages.appendChild(typingDiv);
                this.scrollToBottom();
            }

            hideTypingIndicator() {
                this.isTyping = false;
                this.sendButton.disabled = false;

                const typingIndicator = document.getElementById('typingIndicator');
                if (typingIndicator) {
                    typingIndicator.remove();
                }
            }

            showError(message) {
                const errorDiv = document.createElement('div');
                errorDiv.className = 'error-message';
                errorDiv.innerHTML = `<i class="fas fa-exclamation-triangle me-2"></i>${message}`;
                
                this.chatMessages.appendChild(errorDiv);
                this.scrollToBottom();

                // Auto remove error message after 3 seconds
                setTimeout(() => {
                    if (errorDiv.parentNode) {
                        errorDiv.remove();
                    }
                }, 3000);
            }

            scrollToBottom() {
                this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
            }

            // Public method for users to set webhook URL
            setWebhookUrl(url) {
                this.webhookUrl = url;
                this.updateConnectionStatus();
                console.log('Webhook URL set:', url);
            }
        }

        // Initialize chat interface
        const chat = new ChatInterface();

        // Usage:
        // Replace the URL below with your actual N8N webhook URL
        chat.setWebhookUrl('https://a3g.app.n8n.cloud/webhook/chat_webhook');

        // Example: If your N8N runs locally
        // chat.setWebhookUrl('http://localhost:5678/webhook/chat');

        console.log('Chat interface initialized!');
        console.log('Please use chat.setWebhookUrl("your-webhook-url") to setup connection');
    </script>
</body>
</html>
// ChatBot Class
class ChatBot {
    constructor() {
        // ‚ö†Ô∏è Important: Replace with your n8n webhook URL
        this.webhookUrl = 'https://a3g.app.n8n.cloud/webhook/chat_webhook';
        
        // Initialize session ID
        this.sessionId = this.getOrCreateSessionId();
        
        // Create ChatBot UI
        this.createChatBotUI();
        
        // DOM elements
        this.chatbotToggle = document.getElementById('chatbotToggle');
        this.chatbotPanel = document.getElementById('chatbotPanel');
        this.chatbotClose = document.getElementById('chatbotClose');
        this.messagesContainer = document.getElementById('chatMessages');
        this.messageInput = document.getElementById('messageInput');
        this.sendButton = document.getElementById('sendButton');
        this.typingIndicator = document.getElementById('typingIndicator');
        this.notificationBadge = document.getElementById('notificationBadge');
        
        // Bind events
        this.bindEvents();
        
        // Load chat history
        this.loadChatHistory();
        
        console.log('ChatBot initialized successfully, Session ID:', this.sessionId);
    }
    
    createChatBotUI() {
        // Create CSS styles
        const style = document.createElement('style');
        style.textContent = `
            .chatbot-widget {
                position: fixed;
                bottom: 20px;
                right: 20px;
                z-index: 1000;
            }

            .chatbot-toggle {
                width: 60px;
                height: 60px;
                background: linear-gradient(135deg, #ff6b9d 0%, #c44569 100%);
                border: none;
                border-radius: 50%;
                cursor: pointer;
                box-shadow: 0 4px 20px rgba(255, 107, 157, 0.4);
                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                color: white;
                font-size: 24px;
                display: flex;
                align-items: center;
                justify-content: center;
                position: relative;
                animation: float 3s ease-in-out infinite;
            }

            @keyframes float {
                0%, 100% { transform: translateY(0px); }
                50% { transform: translateY(-8px); }
            }

            .chatbot-toggle:hover {
                transform: scale(1.1) translateY(-2px);
                box-shadow: 0 8px 30px rgba(255, 107, 157, 0.5);
                background: linear-gradient(135deg, #ff7bb0 0%, #d15587 100%);
            }

            .chatbot-toggle:active {
                transform: scale(0.95);
            }

            .chatbot-panel {
                position: absolute;
                bottom: 80px;
                right: 0;
                width: 350px;
                height: 500px;
                background: white;
                border-radius: 20px;
                box-shadow: 0 20px 40px rgba(255, 107, 157, 0.2);
                display: none;
                flex-direction: column;
                overflow: hidden;
                border: 2px solid rgba(255, 107, 157, 0.1);
                backdrop-filter: blur(10px);
            }

            .chatbot-panel.active {
                display: flex;
                animation: slideInUp 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            }

            @keyframes slideInUp {
                from {
                    opacity: 0;
                    transform: translateY(30px) scale(0.9);
                }
                to {
                    opacity: 1;
                    transform: translateY(0) scale(1);
                }
            }

            .chatbot-header {
                background: linear-gradient(135deg, #ff6b9d 0%, #c44569 100%);
                color: white;
                padding: 18px;
                display: flex;
                justify-content: space-between;
                align-items: center;
                position: relative;
                overflow: hidden;
            }

            .chatbot-header::before {
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
                animation: shimmer 3s infinite;
            }

            @keyframes shimmer {
                0% { left: -100%; }
                100% { left: 100%; }
            }

            .chatbot-title {
                font-size: 16px;
                font-weight: bold;
                display: flex;
                align-items: center;
                gap: 8px;
            }

            .title-icon {
                animation: bounce 2s infinite;
            }

            @keyframes bounce {
                0%, 100% { transform: translateY(0); }
                50% { transform: translateY(-4px); }
            }

            .chatbot-close {
                background: none;
                border: none;
                color: white;
                font-size: 18px;
                cursor: pointer;
                width: 32px;
                height: 32px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.3s ease;
            }

            .chatbot-close:hover {
                background: rgba(255,255,255,0.2);
                transform: rotate(90deg);
            }

            .chat-messages {
                flex: 1;
                overflow-y: auto;
                padding: 15px;
                display: flex;
                flex-direction: column;
                gap: 12px;
                background: linear-gradient(135deg, #ffeef4 0%, #ffe0eb 100%);
                position: relative;
            }

            .chat-messages::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-image: 
                    radial-gradient(circle at 20% 20%, rgba(255, 107, 157, 0.1) 0%, transparent 50%),
                    radial-gradient(circle at 80% 80%, rgba(196, 69, 105, 0.1) 0%, transparent 50%),
                    radial-gradient(circle at 40% 60%, rgba(255, 182, 193, 0.1) 0%, transparent 50%);
                pointer-events: none;
            }

            .message {
                max-width: 80%;
                padding: 12px 16px;
                border-radius: 20px;
                line-height: 1.4;
                word-wrap: break-word;
                font-size: 14px;
                animation: messageSlideIn 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                position: relative;
                z-index: 1;
            }

            @keyframes messageSlideIn {
                from {
                    opacity: 0;
                    transform: translateY(20px) scale(0.9);
                }
                to {
                    opacity: 1;
                    transform: translateY(0) scale(1);
                }
            }

            .message.user {
                background: linear-gradient(135deg, #ff6b9d, #c44569);
                color: white;
                align-self: flex-end;
                border-bottom-right-radius: 6px;
                box-shadow: 0 4px 15px rgba(255, 107, 157, 0.3);
            }

            .message.user::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: linear-gradient(135deg, rgba(255,255,255,0.1), transparent);
                border-radius: inherit;
            }

            .message.ai {
                background: white;
                color: #333;
                align-self: flex-start;
                border-bottom-left-radius: 6px;
                border: 2px solid #ffcce0;
                box-shadow: 0 4px 15px rgba(255, 107, 157, 0.1);
                animation: messageSlideIn 0.4s cubic-bezier(0.4, 0, 0.2, 1), glow 2s ease-in-out;
            }

            @keyframes glow {
                0%, 100% { box-shadow: 0 4px 15px rgba(255, 107, 157, 0.1); }
                50% { box-shadow: 0 4px 20px rgba(255, 107, 157, 0.3); }
            }

            .message.system {
                background: linear-gradient(135deg, #ff9ac1, #e91e63);
                color: white;
                align-self: center;
                font-size: 12px;
                max-width: 90%;
                text-align: center;
                animation: messageSlideIn 0.4s cubic-bezier(0.4, 0, 0.2, 1), pulse 2s infinite;
            }

            .message.error-message {
                background: linear-gradient(135deg, #ff4757, #c44569);
                color: white;
                align-self: center;
                font-size: 12px;
                max-width: 90%;
                text-align: center;
                animation: shake 0.5s ease-in-out;
            }

            @keyframes shake {
                0%, 100% { transform: translateX(0); }
                25% { transform: translateX(-4px); }
                75% { transform: translateX(4px); }
            }

            @keyframes pulse {
                0%, 100% { transform: scale(1); }
                50% { transform: scale(1.02); }
            }

            .typing-indicator {
                display: none;
                align-self: flex-start;
                padding: 12px 16px;
                background: white;
                border-radius: 20px;
                border-bottom-left-radius: 6px;
                border: 2px solid #ffcce0;
                box-shadow: 0 4px 15px rgba(255, 107, 157, 0.1);
                animation: typingPulse 1s infinite;
            }

            @keyframes typingPulse {
                0%, 100% { transform: scale(1); }
                50% { transform: scale(1.05); }
            }

            .typing-dots {
                display: flex;
                gap: 4px;
            }

            .typing-dot {
                width: 8px;
                height: 8px;
                background: linear-gradient(135deg, #ff6b9d, #c44569);
                border-radius: 50%;
                animation: typingAnimation 1.4s infinite ease-in-out;
            }

            .typing-dot:nth-child(2) {
                animation-delay: 0.2s;
            }

            .typing-dot:nth-child(3) {
                animation-delay: 0.4s;
            }

            @keyframes typingAnimation {
                0%, 60%, 100% {
                    transform: scale(0.8);
                    opacity: 0.5;
                }
                30% {
                    transform: scale(1.2);
                    opacity: 1;
                }
            }

            .chat-input {
                padding: 15px;
                border-top: 2px solid #ffcce0;
                display: flex;
                gap: 10px;
                background: white;
                position: relative;
            }

            .chat-input::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 2px;
                background: linear-gradient(90deg, #ff6b9d, #c44569, #ff6b9d);
                background-size: 200% 100%;
                animation: gradientMove 3s linear infinite;
            }

            @keyframes gradientMove {
                0% { background-position: 200% 0; }
                100% { background-position: -200% 0; }
            }

            .input-field {
                flex: 1;
                padding: 12px 16px;
                border: 2px solid #ffcce0;
                border-radius: 25px;
                outline: none;
                font-size: 14px;
                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                background: linear-gradient(135deg, #fff 0%, #fef7fa 100%);
            }

            .input-field:focus {
                border-color: #ff6b9d;
                box-shadow: 0 0 20px rgba(255, 107, 157, 0.2);
                transform: translateY(-2px);
            }

            .send-button {
                padding: 12px 18px;
                background: linear-gradient(135deg, #ff6b9d 0%, #c44569 100%);
                color: white;
                border: none;
                border-radius: 25px;
                cursor: pointer;
                font-size: 14px;
                font-weight: bold;
                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                position: relative;
                overflow: hidden;
            }

            .send-button::before {
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
                transition: left 0.5s;
            }

            .send-button:hover:not(:disabled) {
                transform: translateY(-2px) scale(1.05);
                box-shadow: 0 6px 20px rgba(255, 107, 157, 0.4);
            }

            .send-button:hover:not(:disabled)::before {
                left: 100%;
            }

            .send-button:active:not(:disabled) {
                transform: translateY(0) scale(0.98);
            }

            .send-button:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }

            .notification-badge {
                position: absolute;
                top: -8px;
                right: -8px;
                width: 24px;
                height: 24px;
                background: linear-gradient(135deg, #ff4757, #c44569);
                color: white;
                border-radius: 50%;
                font-size: 12px;
                display: none;
                align-items: center;
                justify-content: center;
                animation: notificationPulse 1.5s infinite, bounce 2s infinite;
                font-weight: bold;
                box-shadow: 0 4px 15px rgba(255, 71, 87, 0.4);
            }

            @keyframes notificationPulse {
                0% { 
                    transform: scale(1); 
                    box-shadow: 0 4px 15px rgba(255, 71, 87, 0.4);
                }
                50% { 
                    transform: scale(1.1); 
                    box-shadow: 0 6px 20px rgba(255, 71, 87, 0.6);
                }
                100% { 
                    transform: scale(1); 
                    box-shadow: 0 4px 15px rgba(255, 71, 87, 0.4);
                }
            }

            /* Responsive Design */
            @media (max-width: 768px) {
                .chatbot-panel {
                    width: 320px;
                    height: 450px;
                    bottom: 70px;
                }
            }

            @media (max-width: 480px) {
                .chatbot-widget {
                    bottom: 15px;
                    right: 15px;
                }
                
                .chatbot-toggle {
                    width: 50px;
                    height: 50px;
                    font-size: 20px;
                }
                
                .chatbot-panel {
                    width: calc(100vw - 30px);
                    height: 70vh;
                    bottom: 75px;
                    right: -15px;
                }
            }

            /* Custom Scrollbar */
            .chat-messages::-webkit-scrollbar {
                width: 6px;
            }

            .chat-messages::-webkit-scrollbar-track {
                background: #ffcce0;
                border-radius: 3px;
            }

            .chat-messages::-webkit-scrollbar-thumb {
                background: linear-gradient(135deg, #ff6b9d, #c44569);
                border-radius: 3px;
            }

            .chat-messages::-webkit-scrollbar-thumb:hover {
                background: linear-gradient(135deg, #ff7bb0, #d15587);
            }
        `;
        document.head.appendChild(style);
        
        // Create ChatBot HTML
        const chatbotHTML = `
            <div class="chatbot-widget" id="chatbotWidget">
                <button class="chatbot-toggle" id="chatbotToggle">
                    <i class="fas fa-comments"></i>
                    <div class="notification-badge" id="notificationBadge">!</div>
                </button>
                
                <div class="chatbot-panel" id="chatbotPanel">
                    <div class="chatbot-header">
                        <div class="chatbot-title">
                            <span class="title-icon">ü§ñ</span>
                            AI Assistant v6
                        </div>
                        <button class="chatbot-close" id="chatbotClose">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    
                    <div class="chat-messages" id="chatMessages">
                        <div class="message system">
                            Welcome to AI Assistant! I can answer any questions about Professor Luarn's courses or AI topics.
                        </div>
                    </div>
                    
                    <div class="typing-indicator" id="typingIndicator">
                        <div class="typing-dots">
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                        </div>
                    </div>
                    
                    <div class="chat-input">
                        <input 
                            type="text" 
                            class="input-field" 
                            id="messageInput" 
                            placeholder="Type your question..."
                            maxlength="500"
                        >
                        <button class="send-button" id="sendButton" disabled>Send</button>
                    </div>
                </div>
            </div>
        `;
        
        // Insert at end of body
        document.body.insertAdjacentHTML('beforeend', chatbotHTML);
    }
    
    getOrCreateSessionId() {
        let sessionId = localStorage.getItem('chatbot_session_id');
        if (!sessionId) {
            sessionId = 'web_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            localStorage.setItem('chatbot_session_id', sessionId);
        }
        return sessionId;
    }
    
    bindEvents() {
        // Chatbot toggle
        this.chatbotToggle.addEventListener('click', () => {
            this.toggleChatbot();
        });
        
        this.chatbotClose.addEventListener('click', () => {
            this.closeChatbot();
        });
        
        // Send button click event
        this.sendButton.addEventListener('click', () => {
            this.sendMessage();
        });
        
        // Input field key press event
        this.messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });
        
        // Input field input event
        this.messageInput.addEventListener('input', () => {
            this.sendButton.disabled = this.messageInput.value.trim() === '';
        });
        
        // Click outside to close chatbot
        document.addEventListener('click', (e) => {
            if (!this.chatbotToggle.contains(e.target) && 
                !this.chatbotPanel.contains(e.target) && 
                this.chatbotPanel.classList.contains('active')) {
                this.closeChatbot();
            }
        });
    }
    
    toggleChatbot() {
        if (this.chatbotPanel.classList.contains('active')) {
            this.closeChatbot();
        } else {
            this.openChatbot();
        }
    }
    
    openChatbot() {
        this.chatbotPanel.classList.add('active');
        this.messageInput.focus();
        this.hideNotification();
        this.scrollToBottom();
    }
    
    closeChatbot() {
        this.chatbotPanel.classList.remove('active');
    }
    
    showNotification() {
        this.notificationBadge.style.display = 'flex';
    }
    
    hideNotification() {
        this.notificationBadge.style.display = 'none';
    }
    
    async sendMessage() {
        const message = this.messageInput.value.trim();
        if (!message) return;
        
        // Show user message
        this.addMessage(message, 'user');
        
        // Clear input and disable send button
        this.messageInput.value = '';
        this.sendButton.disabled = true;
        
        // Show typing indicator
        this.showTypingIndicator();
        
        try {
            // Send request to n8n webhook
            const response = await fetch(this.webhookUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: message,
                    sessionId: this.sessionId,
                    timestamp: new Date().toISOString()
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (data.success && data.message) {
                this.addMessage(data.message, 'ai');
                
                // Save conversation to local storage
                this.saveChatToLocal(message, data.message);
                
                // Show notification if chatbot is closed
                if (!this.chatbotPanel.classList.contains('active')) {
                    this.showNotification();
                }
            } else {
                throw new Error('Invalid response format');
            }
            
        } catch (error) {
            console.error('Error sending message:', error);
            this.addMessage('Sorry, an error occurred. Please check your network connection or try again later.', 'error-message');
        } finally {
            // Hide typing indicator
            this.hideTypingIndicator();
        }
    }
    
    addMessage(content, type) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}`;
        messageDiv.textContent = content;
        
        this.messagesContainer.appendChild(messageDiv);
        this.scrollToBottom();
    }
    
    showTypingIndicator() {
        this.typingIndicator.style.display = 'block';
        this.scrollToBottom();
    }
    
    hideTypingIndicator() {
        this.typingIndicator.style.display = 'none';
    }
    
    scrollToBottom() {
        setTimeout(() => {
            this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
        }, 100);
    }
    
    saveChatToLocal(userMessage, aiMessage) {
        const chatHistory = JSON.parse(localStorage.getItem('chatbot_history') || '[]');
        
        chatHistory.push({
            timestamp: new Date().toISOString(),
            sessionId: this.sessionId,
            userMessage: userMessage,
            aiMessage: aiMessage
        });
        
        // Limit history records (keep max 100 entries)
        if (chatHistory.length > 100) {
            chatHistory.splice(0, chatHistory.length - 100);
        }
        
        localStorage.setItem('chatbot_history', JSON.stringify(chatHistory));
    }
    
    loadChatHistory() {
        const chatHistory = JSON.parse(localStorage.getItem('chatbot_history') || '[]');
        const currentSessionHistory = chatHistory.filter(chat => chat.sessionId === this.sessionId);
        
        // Only load the latest 10 conversations
        const recentHistory = currentSessionHistory.slice(-10);
        
        recentHistory.forEach(chat => {
            this.addMessage(chat.userMessage, 'user');
            this.addMessage(chat.aiMessage, 'ai');
        });
        
        if (recentHistory.length === 0) {
            // If no history, show welcome message
            setTimeout(() => {
                this.addMessage('Hello! I\'m AI Assistant v6. Do you have any questions about Professor Luarn\'s courses or AI topics?', 'ai');
            }, 1000);
        }
    }
    
    // Method to clear chat history (can be called in console)
    clearHistory() {
        localStorage.removeItem('chatbot_history');
        localStorage.removeItem('chatbot_session_id');
        location.reload();
    }
}

// Initialize ChatBot
document.addEventListener('DOMContentLoaded', function() {
    // Wait one second to ensure page is fully loaded
    setTimeout(() => {
        window.chatBot = new ChatBot();
        
        // Provide method to clear history in console
        window.clearChatHistory = () => {
            if (confirm('Are you sure you want to clear all chat history?')) {
                window.chatBot.clearHistory();
            }
        };
        
        console.log('ChatBot loaded successfully!');
        console.log('To clear chat history, run in console: clearChatHistory()');
    }, 1000);
});
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Inspirational Post Generator</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #ffa6c1 0%, #ff6b9d 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(255, 107, 157, 0.3);
            max-width: 800px;
            width: 100%;
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #ffa6c1 0%, #ff6b9d 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 28px;
            margin-bottom: 10px;
        }

        .header p {
            opacity: 0.9;
            font-size: 14px;
        }

        .content {
            padding: 30px;
        }

        .upload-section {
            border: 3px dashed #ff6b9d;
            border-radius: 15px;
            padding: 40px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
            background: #fff5f8;
            margin-bottom: 30px;
        }

        .upload-section:hover {
            background: #ffe8f0;
            border-color: #ff4081;
        }

        .upload-section.dragover {
            background: #ffd6e7;
            border-color: #ff4081;
        }

        .upload-icon {
            font-size: 48px;
            margin-bottom: 15px;
        }

        .file-input {
            display: none;
        }

        .generate-btn, .post-btn {
            background: linear-gradient(135deg, #ffa6c1 0%, #ff6b9d 100%);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 15px;
            transition: transform 0.2s;
        }

        .generate-btn:hover, .post-btn:hover {
            transform: scale(1.05);
        }

        .generate-btn:disabled, .post-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .preview-section {
            display: none;
            margin-top: 30px;
            border: 1px solid #ffd6e7;
            border-radius: 15px;
            padding: 20px;
            background: #fff5f8;
        }

        .preview-section.show {
            display: block;
        }

        .preview-title {
            font-size: 20px;
            color: #c2185b;
            margin-bottom: 15px;
            font-weight: bold;
        }

        .preview-content {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }

        .preview-image {
            flex: 1;
            max-width: 300px;
        }

        .preview-image img {
            width: 100%;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .preview-text {
            flex: 1;
            padding: 15px;
            background: white;
            border-radius: 10px;
            border: 1px solid #ffe0ec;
        }

        .preview-text textarea {
            width: 100%;
            min-height: 200px;
            border: none;
            outline: none;
            font-size: 14px;
            line-height: 1.6;
            resize: vertical;
            font-family: inherit;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }

        .status {
            padding: 10px 20px;
            margin: 15px 0;
            border-radius: 8px;
            text-align: center;
            display: none;
        }

        .status.success {
            background: #ffe8f0;
            color: #c2185b;
            border: 1px solid #ffc0d4;
        }

        .status.error {
            background: #ffebee;
            color: #c62828;
            border: 1px solid #ef9a9a;
        }

        .status.info {
            background: #fce4ec;
            color: #880e4f;
            border: 1px solid #f8bbd0;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #ffe0ec;
            border-top: 3px solid #ff6b9d;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .thinking {
            display: none;
            text-align: center;
            padding: 20px;
            color: #c2185b;
        }

        .thinking.show {
            display: block;
        }

        .thinking-dots {
            display: inline-flex;
            gap: 4px;
            margin-left: 10px;
        }

        .thinking-dots span {
            width: 8px;
            height: 8px;
            background: #ff6b9d;
            border-radius: 50%;
            animation: thinking 1.4s ease-in-out infinite;
        }

        .thinking-dots span:nth-child(1) { animation-delay: 0s; }
        .thinking-dots span:nth-child(2) { animation-delay: 0.2s; }
        .thinking-dots span:nth-child(3) { animation-delay: 0.4s; }

        @keyframes thinking {
            0%, 60%, 100% {
                transform: translateY(0);
                opacity: 0.7;
            }
            30% {
                transform: translateY(-10px);
                opacity: 1;
            }
        }

        @media (max-width: 768px) {
            .preview-content {
                flex-direction: column;
            }

            .preview-image {
                max-width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚ú® AI Inspirational Post Generator</h1>
            <p>Upload an image and let AI create inspiring content for your social media</p>
        </div>

        <div class="content">
            <div class="upload-section" id="uploadArea">
                <div class="upload-icon">üìºÔ∏è</div>
                <h3>Click or drag image here</h3>
                <p style="color: #c2185b; margin-top: 10px;">PNG or JPG format (max 2MB)</p>
                <input type="file" id="fileInput" class="file-input" accept=".png, .jpg, .jpeg">
                <button class="generate-btn" id="generateBtn" disabled>Generate AI Content</button>
            </div>

            <div class="status" id="status"></div>

            <div class="thinking" id="thinking">
                <span>AI is analyzing your image and creating inspirational content</span>
                <div class="thinking-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>

            <div class="preview-section" id="previewSection">
                <div class="preview-title">üëÄ Preview Your Post</div>
                <div class="preview-content">
                    <div class="preview-image">
                        <img id="previewImage" src="" alt="Preview">
                    </div>
                    <div class="preview-text">
                        <textarea id="postText" placeholder="Generated content will appear here..."></textarea>
                    </div>
                </div>
                <div class="action-buttons">
                    <button class="generate-btn" id="regenerateBtn">üîÑ Regenerate</button>
                    <button class="post-btn" id="postBtn">üì§ Post to Facebook</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Replace with your n8n webhook URLs
        const N8N_GENERATE_URL = 'https://a3g.app.n8n.cloud/webhook/upload-image';
        const N8N_POST_URL = 'https://a3g.app.n8n.cloud/webhook/post-to-facebook';

        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');
        const generateBtn = document.getElementById('generateBtn');
        const status = document.getElementById('status');
        const thinking = document.getElementById('thinking');
        const previewSection = document.getElementById('previewSection');
        const previewImage = document.getElementById('previewImage');
        const postText = document.getElementById('postText');
        const regenerateBtn = document.getElementById('regenerateBtn');
        const postBtn = document.getElementById('postBtn');

        let selectedFile = null;
        let imageBase64 = null;

        // Upload area click
        uploadArea.addEventListener('click', (e) => {
            if (e.target !== generateBtn && !generateBtn.contains(e.target)) {
                fileInput.click();
            }
        });

        // File selection
        fileInput.addEventListener('change', (e) => {
            handleFileSelect(e.target.files[0]);
        });

        // Drag and drop
        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });

        uploadArea.addEventListener('dragleave', () => {
            uploadArea.classList.remove('dragover');
        });

        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            handleFileSelect(e.dataTransfer.files[0]);
        });

        function handleFileSelect(file) {
            if (!file) return;

            const validTypes = ['image/png', 'image/jpeg', 'image/jpg'];
            if (!validTypes.includes(file.type)) {
                showStatus('Please select a PNG or JPG image!', 'error');
                return;
            }

            if (file.size > 2 * 1024 * 1024) {
                showStatus('Image must be less than 2MB!', 'error');
                return;
            }

            selectedFile = file;
            
            // Convert to base64
            const reader = new FileReader();
            reader.onload = (e) => {
                imageBase64 = e.target.result;
                previewImage.src = imageBase64;
                generateBtn.disabled = false;
                showStatus(`‚úÖ Image selected: ${file.name}`, 'success');
            };
            reader.readAsDataURL(file);
        }

        // Generate content
        generateBtn.addEventListener('click', async (e) => {
            e.stopPropagation();
            await generateContent();
        });

        regenerateBtn.addEventListener('click', generateContent);

        async function generateContent() {
            if (!selectedFile) return;

            generateBtn.disabled = true;
            regenerateBtn.disabled = true;
            thinking.classList.add('show');
            previewSection.classList.remove('show');

            const formData = new FormData();
            formData.append('image', selectedFile);

            try {
                console.log('Sending request to:', N8N_GENERATE_URL);
                
                const response = await fetch(N8N_GENERATE_URL, {
                    method: 'POST',
                    body: formData
                });

                console.log('Response status:', response.status);
                console.log('Response ok:', response.ok);

                // Try to get response text first
                const responseText = await response.text();
                console.log('Response text:', responseText);

                let result;
                try {
                    result = JSON.parse(responseText);
                    console.log('Parsed result:', result);
                } catch (parseError) {
                    console.error('JSON parse error:', parseError);
                    throw new Error('Invalid JSON response from server');
                }

                thinking.classList.remove('show');

                // More flexible response handling
                if (response.ok) {
                    // Check various possible response formats from n8n
                    const message = result.output || result.message || result.text || result.content || result.data?.message || result.body?.output;
                    
                    if (message) {
                        postText.value = message;
                        previewSection.classList.add('show');
                        showStatus('‚úÖ Content generated successfully!', 'success');
                    } else {
                        console.error('No message found in result:', result);
                        throw new Error('No content in response. Check console for details.');
                    }
                } else {
                    throw new Error(result.message || result.error || `Server error: ${response.status}`);
                }
            } catch (error) {
                console.error('Generation error:', error);
                thinking.classList.remove('show');
                showStatus('‚ùå Error: ' + error.message, 'error');
            } finally {
                generateBtn.disabled = false;
                regenerateBtn.disabled = false;
            }
        }

        // Post to Facebook
        postBtn.addEventListener('click', async () => {
            if (!confirm('Are you sure you want to post this to Facebook?')) {
                return;
            }

            postBtn.disabled = true;
            postBtn.innerHTML = 'Posting <span class="loading"></span>';

            const formData = new FormData();
            formData.append('image', selectedFile);
            formData.append('message', postText.value);

            try {
                const response = await fetch(N8N_POST_URL, {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (response.ok) {
                    showStatus('‚úÖ Successfully posted to Facebook!', 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    throw new Error(result.message || 'Post failed');
                }
            } catch (error) {
                showStatus('‚ùå Failed to post: ' + error.message, 'error');
                postBtn.disabled = false;
                postBtn.innerHTML = 'üì§ Post to Facebook';
            }
        });

        function showStatus(message, type) {
            status.textContent = message;
            status.className = `status ${type}`;
            status.style.display = 'block';
            setTimeout(() => {
                status.style.display = 'none';
            }, 5000);
        }
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My 2025 AI Personal Website</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="style2.css">
    <style>
        .titles-container {
            margin-bottom: 1.5rem;
        }
        
        .title-line {
            margin-bottom: 0.3rem !important;
            position: relative;
            padding-left: 1.5rem;
            font-weight: bold;
            color: #820029 !important; 
            text-shadow: 0 2px 4px rgba(255,255,255,2); 
        }
        
        .title-line:before {
            content: "‚Ä¢";
            color:  #820029; 
            font-size: 1.2em;
            position: absolute;
            left: 0;
            top: 0;
            text-shadow: 0 2px 4px rgba(255,255,255,2);
        }
        
        .title-line:last-child {
            margin-bottom: 0 !important;
        }
    </style>
    <link rel="icon" type="image/x-icon" href="/pic/favicon.ico">
</head>
<script src="chatbot.js"></script>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg fixed-top">
        <div class="container">
            <a class="navbar-brand" href="#home">2025 AI</a>

            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="#home">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#about">About Me</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#projects">My Projects</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#contact">Contact Me</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Hero Section -->
    <section id="home" class="hero">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-6 hero-content fade-in">
                    <h1 id="name"></h1>
                    <div class="titles-container">
                        <p class="subtitle title-line" id="title1"></p>
                        <p class="subtitle title-line" id="title2"></p>
                    </div>
                    <div class="mb-3">
                        <strong>Expertise:</strong>
                        <span id="expertise"></span>
                    </div>
                    <div class="mb-3">
                        <strong>Education:</strong>
                        <span id="education"></span>
                    </div>
                    <div class="mb-3">
                        <strong>Contact Email:</strong>
                        <a href="mailto:" class="text-white" id="email"></a>
                    </div>
                    <div class="mb-3">
                        <strong>LinkedIn:</strong>
                        <a href="" target="_blank" class="text-white" id="linkedin">
                            <i class="fab fa-linkedin me-1"></i>
                            <span id="linkedin-text"></span>
                            <i class="fas fa-external-link-alt ms-1"></i>
                        </a>
                    </div>
                    <div class="mb-4">
                        <strong>2025 Pforzheim Student Works Link:</strong>
                        <a href="https://PROFluarn.github.io/student_websites.html" target="_blank" class="text-white">
                            https://PROFluarn.github.io/student_websites.html
                            <i class="fas fa-external-link-alt ms-1"></i>
                        </a>
                    </div>
                </div>
                <div class="col-lg-6 text-center fade-in">
                    <img src="pic/mypic.png" alt="mypic" class="profile-img">
                </div>
            </div>
        </div>
    </section>

    <!-- About Section -->
    <section id="about" class="section">
        <div class="container">
            <h2 class="section-title">About Me</h2>
            <div class="row justify-content-center">
                <div class="col-lg-8">
                    <div class="card fade-in">
                        <div class="card-body p-4">
                            <p class="lead text-center" id="about-text">
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Projects Section -->
    <section id="projects" class="section bg-light">
        <div class="container">
            <h2 class="section-title">My Projects</h2>

            <!-- Filter Buttons -->
            <div class="filter-buttons fade-in">
                <button class="btn filter-btn active" onclick="filterProjects('all')">All</button>
                <button class="btn filter-btn" onclick="filterProjects('cognitive')">Perception AI</button>
                <button class="btn filter-btn" onclick="filterProjects('generative')">Generative AI</button>
                <button class="btn filter-btn" onclick="filterProjects('agentic')">Agentic AI</button>
                <button class="btn filter-btn" onclick="filterProjects('tools')">Other Tools</button>
            </div>

            <!-- Projects Grid -->
            <div class="project-grid fade-in" id="projects-grid">
                <!-- Projects will be dynamically generated -->
            </div>
        </div>
    </section>

    <!-- Contact Section -->
    <section id="contact" class="section bg-light">
        <div class="container">
            <h2 class="section-title">Contact Me</h2>
            <div class="row justify-content-center">
                <div class="col-lg-8">
                    <div class="contact-info fade-in">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="contact-item">
                                    <i class="fas fa-envelope"></i>
                                    <div>
                                        <strong>Email</strong><br>
                                        <a href="mailto:" class="text-white" id="contact-email1"></a><br>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="contact-item">
                                    <i class="fas fa-phone"></i>
                                    <div>
                                        <strong>Phone</strong><br>
                                        <span id="contact-phone"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="contact-item">
                            <i class="fas fa-map-marker-alt"></i>
                            <div>
                                <strong>Location</strong><br>
                                <span id="contact-location"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Footer -->
    <footer class="footer">
        <div class="container">
            <p>&copy; 2025 Dr. Pin Luarn. All rights reserved.</p>
        </div>
    </footer>

    <!-- Bootstrap JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>

    <script>
        

        // Project data
         const projects = [
            {id: 1, category: 'tools', title: 'Unit #1', description: 'Web Scraping, MediaPipe, Environment - Other Tools Projects, Perception AI'},
            {id: 2, category: 'tools', title: 'Unit #2', description: 'CV2 - Other Tools Projects'},
            {id: 3, category: 'cognitive', title: 'Unit #3', description: 'Object Detection - Perception AI'},
            {id: 4, category: 'cognitive', title: 'Unit #4', description: 'Image Segmentation - Perception AI'},
            {id: 5, category: 'cognitive', title: 'Unit #5', description: 'Face Detection - Perception AI'},
            {id: 6, category: 'cognitive', title: 'Unit #6', description: 'Face Landmark Detection - Perception AI'},
            {id: 7, category: 'cognitive', title: 'Unit #7', description: 'Pose Landmark Detection - Perception AI'},
            {id: 8, category: 'cognitive', title: 'Unit #8', description: 'Hand Landmarks - Perception AI'},
            {id: 9, category: 'cognitive', title: 'Unit #9', description: 'Gesture Recognition - Perception AI'},
            {id: 10, category: 'tools', title: 'Unit #10', description: 'Streamlit - Other Tools Projects'},
            {id: 11, category: 'generative', title: 'Unit #11', description: 'Local LLM - Generative AI'},
            {id: 12, category: 'generative', title: 'Unit #12', description: 'Neural Style Transfer - Generative AI'},
            {id: 13, category: 'generative', title: 'Unit #13', description: 'Torch - Generative AI'},
            {id: 14, category: 'generative', title: 'Unit #14', description: 'Arbitrary-image Real time NST - Generative AI'},
            {id: 15, category: 'cognitive', title: 'Unit #15', description: 'YOLO - Perception AI'},
            {id: 16, category: 'generative', title: 'Unit #16', description: 'Using Python call LLM API - Generative AI'},
            {id: 17, category: 'generative', title: 'Unit #17', description: 'Building LLM from Scratch - Generative AI'},
            {id: 18, category: 'generative', title: 'Unit #18', description: 'RAG Introduction, LangChain - Generative AI'},
            {id: 19, category: 'agentic', title: 'Unit #19', description: 'AI Agent, MCP, n8n - Agentic AI'},
            {id: 20, category: 'agentic', title: 'Unit #20', description: 'Advanced n8n - Agentic AI'}
        ];

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadProfileData();
            renderProjects('all');
            initScrollAnimations();
            initSmoothScrolling();
        });

        // Load profile data
        function loadProfileData() {
            // Update home section
            document.getElementById('name').textContent = profileData.name;
            document.getElementById('title1').textContent = profileData.title1;
            document.getElementById('title2').textContent = profileData.title2;
            document.getElementById('expertise').textContent = profileData.expertise;
            document.getElementById('education').textContent = profileData.education;
            document.getElementById('email').textContent = profileData.email;
            document.getElementById('email').href = `mailto:${profileData.email}`;
            document.getElementById('linkedin').href = profileData.linkedin;
            document.getElementById('linkedin-text').textContent = profileData.linkedin;
            const aboutText = [profileData.about1, profileData.about2, profileData.about3, profileData.about4]
                .filter(text => text && text.trim()) // Remove empty parts
                .join(' ');
            document.getElementById('about-text').textContent = aboutText;
            document.getElementById('contact-email1').textContent = profileData.email;
            document.getElementById('contact-email1').href = `mailto:${profileData.email}`;
            document.getElementById('contact-phone').textContent = profileData.phone;
            document.getElementById('contact-location').innerHTML = profileData.location;
        }

        // Filter and render projects
        function filterProjects(category) {
            // Update active button
            document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');

            renderProjects(category);
        }

        function renderProjects(category) {
            const grid = document.getElementById('projects-grid');
            const filteredProjects = category === 'all' ? projects : projects.filter(p => p.category === category);

            grid.innerHTML = filteredProjects.map(project => {
                return `
                    <div class="project-card" data-category="${project.category}" onclick="openProject(${project.id})">
                        <div class="project-number">${project.id}</div>
                        <h5>${project.title}</h5>
                        <p class="text-muted">${project.description}</p>
                        <small class="text-primary">Click to view details</small>
                    </div>
                `;
            }).join('');
        }

        // Open project details
        function openProject(id) {
            // Navigate to unit.html with unit ID as parameter
            window.open(`unit.html?unit=${id}`, '_blank');
        }

        // Scroll animations
        function initScrollAnimations() {
            const observerOptions = {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            };

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('visible');
                    }
                });
            }, observerOptions);

            document.querySelectorAll('.fade-in').forEach(el => {
                observer.observe(el);
            });
        }

        // Smooth scrolling for navigation links
        function initSmoothScrolling() {
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        const headerOffset = 70;
                        const elementPosition = target.getBoundingClientRect().top;
                        const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

                        window.scrollTo({
                            top: offsetPosition,
                            behavior: 'smooth'
                        });
                    }
                });
            });
        }

        // Navbar background on scroll
        window.addEventListener('scroll', function() {
            const navbar = document.querySelector('.navbar');
            if (window.scrollY > 50) {
                navbar.style.background = 'rgba(255,255,255,0.98)';
            } else {
                navbar.style.background = 'rgba(255,255,255,0.95)';
            }
        });
// ====== User Profile Data Section - Please modify the content below ======
        const profileData = {
            name: "Professor Pin Luarn",
            title1: "World's Top 2% Scientist",
            title2: "2024 Ministry of Education Teaching Excellence Award Winner",
            expertise: "E-commerce, Internet Marketing, AI Applications",
            education: "Ph.D. in Industrial Engineering, University of Wisconsin-Madison, USA",
            email: "luarn@mail.ntust.edu.tw",
            linkedin: "https://www.linkedin.com/in/pin-luarn-55098833/",
            about1: "Dr. Luarn obtained his Bachelor's degree in Industrial Engineering from Tunghai University, followed by",
            about2: " Master's and Doctoral degrees in Industrial Engineering from the University of Wisconsin-Madison, USA.",
            about3: "In 2023, he was recognized by Stanford University as one of the world's top 2% scientists.",
            about4: "", // Add additional about content here if needed
            phone: "886-2-2737-6754",
            location: "Office: T2-409<br>National Taiwan University of Science and Technology"
        };
        // ====== User Profile Data Section End ======
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stylish Model Generator</title>
    <link rel="icon" type="image/x-icon" href="/pic/favicon.ico">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #ff6b9d 0%, #c44569 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(255, 107, 157, 0.2);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #ff6b9d 0%, #c44569 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            font-weight: 600;
        }

        .header p {
            font-size: 1.1em;
            opacity: 0.9;
            line-height: 1.6;
        }

        .content {
            padding: 40px;
        }

        .upload-section {
            text-align: center;
            margin-bottom: 40px;
        }

        .file-upload-wrapper {
            position: relative;
            display: inline-block;
            margin: 20px 0;
        }

        .file-upload {
            display: none;
        }

        .file-upload-btn {
            background: linear-gradient(135deg, #ff6b9d 0%, #c44569 100%);
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 50px;
            font-size: 1.1em;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(255, 107, 157, 0.3);
        }

        .file-upload-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 107, 157, 0.4);
        }

        .file-info {
            margin-top: 15px;
            padding: 10px;
            background: linear-gradient(135deg, #ffeef4 0%, #ffe0eb 100%);
            border-radius: 10px;
            display: none;
            border: 2px solid #ffcce0;
        }

        .preview-section {
            margin: 30px 0;
        }

        .image-preview {
            max-width: 100%;
            max-height: 300px;
            border-radius: 15px;
            box-shadow: 0 10px 20px rgba(255, 107, 157, 0.2);
            display: none;
        }

        .generate-btn {
            background: linear-gradient(135deg, #ff9ac1 0%, #e91e63 100%);
            color: white;
            padding: 15px 40px;
            border: none;
            border-radius: 50px;
            font-size: 1.2em;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 20px 10px;
            box-shadow: 0 5px 15px rgba(255, 154, 193, 0.3);
            display: none;
        }

        .generate-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 154, 193, 0.4);
        }

        .generate-btn:disabled {
            background: #cccccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .loading {
            display: none;
            text-align: center;
            margin: 30px 0;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #ffcce0;
            border-top: 5px solid #ff6b9d;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .result-section {
            margin-top: 40px;
            display: none;
        }

        .result-title {
            font-size: 1.5em;
            margin-bottom: 20px;
            color: #c44569;
            text-align: center;
        }

        .result-images {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .image-container {
            text-align: center;
        }

        .image-container h3 {
            margin-bottom: 15px;
            color: #c44569;
            font-size: 1.2em;
        }

        .result-image {
            max-width: 100%;
            height: auto;
            border-radius: 15px;
            box-shadow: 0 10px 20px rgba(255, 107, 157, 0.2);
            transition: transform 0.3s ease;
        }

        .result-image:hover {
            transform: scale(1.05);
        }

        .download-btn {
            background: linear-gradient(135deg, #e91e63 0%, #ad1457 100%);
            color: white;
            padding: 12px 25px;
            border: none;
            border-radius: 25px;
            font-size: 1em;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 15px;
            box-shadow: 0 5px 15px rgba(233, 30, 99, 0.3);
        }

        .download-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(233, 30, 99, 0.4);
        }

        .error-message {
            background: linear-gradient(135deg, #ffe6e6, #ffcccc);
            color: #d63031;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            border-left: 4px solid #ff6b6b;
            display: none;
        }

        .success-message {
            background: linear-gradient(135deg, #e6ffe6, #ccffcc);
            color: #00b894;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            border-left: 4px solid #00d084;
            display: none;
        }

        .requirements {
            background: linear-gradient(135deg, #ffeef4 0%, #ffe0eb 100%);
            padding: 20px;
            border-radius: 15px;
            margin: 30px 0;
            border-left: 4px solid #ff6b9d;
        }

        .requirements h3 {
            color: #c44569;
            margin-bottom: 15px;
            font-size: 1.3em;
        }

        .requirements ul {
            color: #666;
            line-height: 1.8;
            padding-left: 20px;
        }

        @media (max-width: 768px) {
            .container {
                margin: 10px;
                border-radius: 15px;
            }

            .content {
                padding: 20px;
            }

            .header {
                padding: 20px;
            }

            .header h1 {
                font-size: 2em;
            }

            .result-images {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üé® Stylish Model Generator</h1>
            <p>Upload your photo, and I'll use n8n to create realistic style models for you</p>
        </div>

        <div class="content">
            <div class="requirements">
                <h3>üìã Usage Instructions</h3>
                <ul>
                    <li>Supported formats: PNG, JPG/JPEG</li>
                    <li>File size: Less than 3MB</li>
                    <li>Recommend uploading clear portrait photos for best results</li>
                    <li>Processing time approximately 3-8 minutes, please be patient</li>
                    <li>If unsuccessful, try again and it should work</li>
                </ul>
            </div>

            <div class="upload-section">
                <div class="file-upload-wrapper">
                    <input type="file" id="imageFile" class="file-upload" accept=".png,.jpg,.jpeg" />
                    <button class="file-upload-btn" onclick="document.getElementById('imageFile').click()">
                        üìÅ Select Image
                    </button>
                </div>
                <div class="file-info" id="fileInfo"></div>
            </div>

            <div class="preview-section">
                <img id="imagePreview" class="image-preview" alt="Image Preview" />
                <div style="text-align: center;">
                    <button id="generateBtn" class="generate-btn">üöÄ Start Generating Model Figure</button>
                </div>
            </div>

            <div class="loading" id="loadingSection">
                <div class="spinner"></div>
                <h3>AI is creating your exclusive model figure...</h3>
                <p>Please wait, this process takes 3-8 minutes</p>
            </div>

            <div class="error-message" id="errorMessage"></div>
            <div class="success-message" id="successMessage"></div>

            <div class="result-section" id="resultSection">
                <h2 class="result-title">üéâ Your Model Figure is Complete!</h2>
                <div class="result-images">
                    <div class="image-container">
                        <h3>üì∑ Original Image</h3>
                        <img id="originalImage" class="result-image" alt="Original Image" />
                        <button class="download-btn" onclick="downloadImage('original')">Download Original</button>
                    </div>
                    <div class="image-container">
                        <h3>üèÜ Generated Model Figure</h3>
                        <img id="generatedImage" class="result-image" alt="Generated Model Figure" />
                        <button class="download-btn" onclick="downloadImage('generated')">Long Press to Download Figure</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Replace with your n8n webhook URL
        const WEBHOOK_URL = 'https://a3g.app.n8n.cloud/webhook/figurine-generator';
        
        let selectedFile = null;
        let originalImageData = null;
        let generatedImageData = null;

        // File selection handling
        document.getElementById('imageFile').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (!file) return;

            // Check file type
            if (!file.type.match(/^image\/(png|jpe?g)$/)) {
                showError('Please select PNG or JPG format images');
                return;
            }

            // Check file size (3MB = 3 * 1024 * 1024 bytes)
            if (file.size > 3 * 1024 * 1024) {
                showError('File size cannot exceed 3MB');
                return;
            }

            selectedFile = file;

            // Display file information
            const fileInfo = document.getElementById('fileInfo');
            const fileSizeMB = (file.size / 1024 / 1024).toFixed(2);
            fileInfo.innerHTML = `
                <strong>üìÑ Selected:</strong> ${file.name}<br>
                <strong>üìä Size:</strong> ${fileSizeMB} MB<br>
                <strong>üîß Format:</strong> ${file.type}
            `;
            fileInfo.style.display = 'block';

            // Display image preview
            const reader = new FileReader();
            reader.onload = function(e) {
                const preview = document.getElementById('imagePreview');
                preview.src = e.target.result;
                preview.style.display = 'block';
                originalImageData = e.target.result;

                // Show generate button
                document.getElementById('generateBtn').style.display = 'inline-block';
            };
            reader.readAsDataURL(file);

            // Hide previous results
            hideResult();
            hideError();
        });

        // Generate button click handling
        document.getElementById('generateBtn').addEventListener('click', async function() {
            if (!selectedFile) {
                showError('Please select an image first');
                return;
            }

            showLoading();
            hideError();
            hideResult();

            try {
                // Prepare FormData
                const formData = new FormData();
                formData.append('image', selectedFile);

                // Send to n8n webhook
                const response = await fetch(WEBHOOK_URL, {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                
                // Handle results
                if (result.success && result.generatedImage) {
                    generatedImageData = result.generatedImage;
                    showResult();
                    showSuccess('üéâ Model figure generated successfully!');
                } else {
                    throw new Error(result.message || 'Generation failed, please retry');
                }

            } catch (error) {
                console.error('Error:', error);
                showError(`‚ùå Generation failed: ${error.message}`);
            } finally {
                hideLoading();
            }
        });

        function showLoading() {
            document.getElementById('loadingSection').style.display = 'block';
            document.getElementById('generateBtn').disabled = true;
        }

        function hideLoading() {
            document.getElementById('loadingSection').style.display = 'none';
            document.getElementById('generateBtn').disabled = false;
        }

        function showError(message) {
            const errorElement = document.getElementById('errorMessage');
            errorElement.textContent = message;
            errorElement.style.display = 'block';
            setTimeout(hideError, 5000);
        }

        function hideError() {
            document.getElementById('errorMessage').style.display = 'none';
        }

        function showSuccess(message) {
            const successElement = document.getElementById('successMessage');
            successElement.textContent = message;
            successElement.style.display = 'block';
            setTimeout(() => {
                successElement.style.display = 'none';
            }, 3000);
        }

        function showResult() {
            document.getElementById('originalImage').src = originalImageData;
            document.getElementById('generatedImage').src = generatedImageData;
            document.getElementById('resultSection').style.display = 'block';
        }

        function hideResult() {
            document.getElementById('resultSection').style.display = 'none';
        }

        function downloadImage(type) {
            let imageData, filename;
            
            if (type === 'original') {
                imageData = originalImageData;
                filename = 'original_image.png';
            } else {
                imageData = generatedImageData;
                filename = 'generated_figurine.png';
            }

            if (!imageData) return;

            // Create download link
            const link = document.createElement('a');
            link.download = filename;
            link.href = imageData;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // Drag and drop functionality
        const uploadSection = document.querySelector('.upload-section');

        uploadSection.addEventListener('dragover', function(e) {
            e.preventDefault();
            uploadSection.style.background = '#fff0f5';
        });

        uploadSection.addEventListener('dragleave', function(e) {
            e.preventDefault();
            uploadSection.style.background = '';
        });

        uploadSection.addEventListener('drop', function(e) {
            e.preventDefault();
            uploadSection.style.background = '';
            
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                document.getElementById('imageFile').files = files;
                document.getElementById('imageFile').dispatchEvent(new Event('change'));
            }
        });
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF RAG Q&A System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #ffa6c1 0%, #ff6b9d 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(255, 107, 157, 0.3);
            max-width: 900px;
            width: 100%;
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #ffa6c1 0%, #ff6b9d 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 28px;
            margin-bottom: 10px;
        }

        .header p {
            opacity: 0.9;
            font-size: 14px;
        }

        .upload-section {
            padding: 30px;
            border-bottom: 2px solid #ffe0ec;
        }

        .upload-area {
            border: 3px dashed #ff6b9d;
            border-radius: 15px;
            padding: 40px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
            background: #fff5f8;
        }

        .upload-area:hover {
            background: #ffe8f0;
            border-color: #ff4081;
        }

        .upload-area.dragover {
            background: #ffd6e7;
            border-color: #ff4081;
        }

        .upload-icon {
            font-size: 48px;
            margin-bottom: 15px;
        }

        .file-input {
            display: none;
        }

        .upload-btn {
            background: linear-gradient(135deg, #ffa6c1 0%, #ff6b9d 100%);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 15px;
            transition: transform 0.2s;
        }

        .upload-btn:hover {
            transform: scale(1.05);
        }

        .upload-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .file-info {
            margin-top: 15px;
            padding: 10px;
            background: #ffe8f0;
            border-radius: 8px;
            display: none;
            color: #c2185b;
        }

        .chat-section {
            padding: 30px;
            height: 500px;
            display: flex;
            flex-direction: column;
        }

        .messages {
            flex: 1;
            overflow-y: auto;
            margin-bottom: 20px;
            padding: 15px;
            background: #fff5f8;
            border-radius: 15px;
        }

        .message {
            margin-bottom: 15px;
            padding: 12px 18px;
            border-radius: 18px;
            max-width: 80%;
            word-wrap: break-word;
            animation: fadeIn 0.3s;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .message.user {
            background: linear-gradient(135deg, #ffa6c1 0%, #ff6b9d 100%);
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 5px;
        }

        .message.assistant {
            background: white;
            border: 1px solid #ffd6e7;
            border-bottom-left-radius: 5px;
            color: #333;
        }

        .message.thinking {
            background: #ffe8f0;
            border: 1px solid #ffc0d4;
            border-bottom-left-radius: 5px;
            color: #c2185b;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .thinking-dots {
            display: inline-flex;
            gap: 4px;
        }

        .thinking-dots span {
            width: 8px;
            height: 8px;
            background: #ff6b9d;
            border-radius: 50%;
            animation: thinking 1.4s ease-in-out infinite;
        }

        .thinking-dots span:nth-child(1) {
            animation-delay: 0s;
        }

        .thinking-dots span:nth-child(2) {
            animation-delay: 0.2s;
        }

        .thinking-dots span:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes thinking {
            0%, 60%, 100% {
                transform: translateY(0);
                opacity: 0.7;
            }
            30% {
                transform: translateY(-10px);
                opacity: 1;
            }
        }

        .input-area {
            display: flex;
            gap: 10px;
        }

        .message-input {
            flex: 1;
            padding: 15px 20px;
            border: 2px solid #ffe0ec;
            border-radius: 25px;
            font-size: 16px;
            outline: none;
            transition: border-color 0.3s;
        }

        .message-input:focus {
            border-color: #ff6b9d;
        }

        .send-btn {
            background: linear-gradient(135deg, #ffa6c1 0%, #ff6b9d 100%);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            transition: transform 0.2s;
        }

        .send-btn:hover {
            transform: scale(1.05);
        }

        .send-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .status {
            padding: 10px 20px;
            margin: 10px 30px;
            border-radius: 8px;
            text-align: center;
            display: none;
        }

        .status.success {
            background: #ffe8f0;
            color: #c2185b;
            border: 1px solid #ffc0d4;
        }

        .status.error {
            background: #ffebee;
            color: #c62828;
            border: 1px solid #ef9a9a;
        }

        .status.info {
            background: #fce4ec;
            color: #880e4f;
            border: 1px solid #f8bbd0;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #ffe0ec;
            border-top: 3px solid #ff6b9d;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .chat-disabled {
            opacity: 0.5;
            pointer-events: none;
        }

        /* Scrollbar styling for pink theme */
        .messages::-webkit-scrollbar {
            width: 8px;
        }

        .messages::-webkit-scrollbar-track {
            background: #ffe8f0;
            border-radius: 10px;
        }

        .messages::-webkit-scrollbar-thumb {
            background: #ff6b9d;
            border-radius: 10px;
        }

        .messages::-webkit-scrollbar-thumb:hover {
            background: #ff4081;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìö PDF RAG Q&A System</h1>
            <p>Upload a PDF document and ask AI questions about it</p>
        </div>

        <div class="upload-section">
            <div class="upload-area" id="uploadArea">
                <div class="upload-icon">üìÑ</div>
                <h3>Click or drag PDF file here</h3>
                <p style="color: #c2185b; margin-top: 10px;">PDF format supported</p>
                <input type="file" id="fileInput" class="file-input" accept=".pdf">
                <button class="upload-btn" id="uploadBtn" disabled>Upload & Vectorize</button>
            </div>
            <div class="file-info" id="fileInfo"></div>
        </div>

        <div class="status" id="status"></div>

        <div class="chat-section chat-disabled" id="chatSection">
            <div class="messages" id="messages">
                <div class="message assistant">
                    üëã Hello! Please upload a PDF file first, then you can start asking questions.
                </div>
            </div>
            <div class="input-area">
                <input 
                    type="text" 
                    class="message-input" 
                    id="messageInput" 
                    placeholder="Enter your question..."
                    disabled
                >
                <button class="send-btn" id="sendBtn" disabled>Send</button>
            </div>
        </div>
    </div>

    <script>
        // ‚ö†Ô∏è Replace with your n8n webhook URLs
        const N8N_UPLOAD_URL = 'https://a3g.app.n8n.cloud/webhook/upload-pdf';
        const N8N_CHAT_URL = 'https://a3g.app.n8n.cloud/webhook/RAGchat';

        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');
        const uploadBtn = document.getElementById('uploadBtn');
        const fileInfo = document.getElementById('fileInfo');
        const status = document.getElementById('status');
        const chatSection = document.getElementById('chatSection');
        const messages = document.getElementById('messages');
        const messageInput = document.getElementById('messageInput');
        const sendBtn = document.getElementById('sendBtn');

        let selectedFile = null;
        let isPdfUploaded = false;
        let sessionId = generateSessionId();
        let thinkingMessageElement = null;

        function generateSessionId() {
            return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        }

        // Click upload area to select file (but not on button)
        uploadArea.addEventListener('click', (e) => {
            if (e.target !== uploadBtn && !uploadBtn.contains(e.target)) {
                fileInput.click();
            }
        });

        // File selection
        fileInput.addEventListener('change', (e) => {
            handleFileSelect(e.target.files[0]);
        });

        // Drag and drop events
        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });

        uploadArea.addEventListener('dragleave', () => {
            uploadArea.classList.remove('dragover');
        });

        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            handleFileSelect(e.dataTransfer.files[0]);
        });

        function handleFileSelect(file) {
            if (!file) return;
            
            if (file.type !== 'application/pdf') {
                showStatus('Please select a PDF file!', 'error');
                return;
            }

            selectedFile = file;
            fileInfo.innerHTML = `‚úÖ Selected: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`;
            fileInfo.style.display = 'block';
            uploadBtn.disabled = false;
        }

        // Upload PDF
        uploadBtn.addEventListener('click', async (e) => {
            e.stopPropagation();
            
            if (!selectedFile) return;

            uploadBtn.disabled = true;
            uploadBtn.innerHTML = 'Processing <span class="loading"></span>';

            const formData = new FormData();
            formData.append('file', selectedFile);

            try {
                const response = await fetch(N8N_UPLOAD_URL, {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (response.ok) {
                    showStatus('‚úÖ PDF successfully uploaded and vectorized! You can now start asking questions.', 'success');
                    isPdfUploaded = true;
                    enableChat();
                } else {
                    throw new Error(result.message || 'Upload failed');
                }
            } catch (error) {
                showStatus('‚ùå Upload failed: ' + error.message, 'error');
                uploadBtn.disabled = false;
            } finally {
                uploadBtn.innerHTML = 'Upload & Vectorize';
            }
        });

        function enableChat() {
            chatSection.classList.remove('chat-disabled');
            messageInput.disabled = false;
            sendBtn.disabled = false;
            messageInput.focus();
        }

        function addThinkingMessage() {
            thinkingMessageElement = document.createElement('div');
            thinkingMessageElement.className = 'message thinking';
            thinkingMessageElement.innerHTML = `
                <span>Thinking</span>
                <div class="thinking-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            `;
            messages.appendChild(thinkingMessageElement);
            messages.scrollTop = messages.scrollHeight;
        }

        function removeThinkingMessage() {
            if (thinkingMessageElement) {
                thinkingMessageElement.remove();
                thinkingMessageElement = null;
            }
        }

        // Send message
        async function sendMessage() {
            const question = messageInput.value.trim();
            if (!question || !isPdfUploaded) return;

            addMessage(question, 'user');
            messageInput.value = '';
            sendBtn.disabled = true;
            messageInput.disabled = true;

            // Add thinking animation
            addThinkingMessage();

            try {
                const response = await fetch(N8N_CHAT_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        chatInput: question,
                        sessionId: sessionId
                    })
                });

                const result = await response.json();

                // Remove thinking animation
                removeThinkingMessage();

                if (response.ok) {
                    const answer = result.output || result.response || 'Sorry, no response received.';
                    addMessage(answer, 'assistant');
                } else {
                    throw new Error('Query failed');
                }
            } catch (error) {
                removeThinkingMessage();
                addMessage('‚ùå Error occurred: ' + error.message, 'assistant');
            } finally {
                sendBtn.disabled = false;
                messageInput.disabled = false;
                messageInput.focus();
            }
        }

        sendBtn.addEventListener('click', sendMessage);
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage();
        });

        function addMessage(text, type) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${type}`;
            messageDiv.textContent = text;
            messages.appendChild(messageDiv);
            messages.scrollTop = messages.scrollHeight;
        }

        function showStatus(message, type) {
            status.textContent = message;
            status.className = `status ${type}`;
            status.style.display = 'block';
            setTimeout(() => {
                status.style.display = 'none';
            }, 5000);
        }
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Financial Times RSS to Facebook Manager</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 28px;
            margin-bottom: 10px;
        }

        .header p {
            opacity: 0.9;
            font-size: 14px;
        }

        .content {
            padding: 30px;
        }

        .action-section {
            text-align: center;
            padding: 40px;
            background: #f8f9ff;
            border-radius: 15px;
            margin-bottom: 30px;
        }

        .fetch-btn, .post-btn, .refresh-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 15px 40px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            transition: transform 0.2s;
            margin: 10px;
        }

        .fetch-btn:hover, .post-btn:hover, .refresh-btn:hover {
            transform: scale(1.05);
        }

        .fetch-btn:disabled, .post-btn:disabled, .refresh-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .status {
            padding: 15px 20px;
            margin: 20px 0;
            border-radius: 10px;
            text-align: center;
            display: none;
            font-weight: 500;
        }

        .status.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .status.info {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 40px;
        }

        .loading.show {
            display: block;
        }

        .spinner {
            display: inline-block;
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .loading-text {
            margin-top: 20px;
            color: #667eea;
            font-size: 16px;
        }

        .preview-section {
            display: none;
            margin-top: 30px;
        }

        .preview-section.show {
            display: block;
        }

        .articles-container {
            background: #f8f9ff;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .article-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 15px;
            border-left: 4px solid #667eea;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .article-title {
            font-size: 18px;
            font-weight: bold;
            color: #333;
            margin-bottom: 10px;
        }

        .article-desc {
            font-size: 14px;
            color: #666;
            line-height: 1.6;
            margin-bottom: 10px;
        }

        .article-link {
            font-size: 13px;
            color: #667eea;
            word-break: break-all;
        }

        .article-meta {
            display: flex;
            gap: 15px;
            margin-top: 10px;
            font-size: 12px;
            color: #999;
        }

        .post-preview {
            background: white;
            border-radius: 15px;
            padding: 25px;
            border: 2px solid #e0e0e0;
            margin-bottom: 20px;
        }

        .preview-title {
            font-size: 20px;
            color: #667eea;
            margin-bottom: 20px;
            font-weight: bold;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .post-textarea {
            width: 100%;
            min-height: 400px;
            border: 1px solid #e0e0e0;
            border-radius: 10px;
            padding: 20px;
            font-size: 15px;
            line-height: 1.8;
            resize: vertical;
            font-family: inherit;
        }

        .post-textarea:focus {
            outline: none;
            border-color: #667eea;
        }

        .button-group {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .section-title {
            font-size: 18px;
            color: #333;
            margin-bottom: 15px;
            font-weight: bold;
        }

        .info-box {
            background: #e8eaf6;
            border-left: 4px solid #667eea;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }

        .info-box p {
            margin: 5px 0;
            font-size: 14px;
            color: #555;
        }

        @media (max-width: 768px) {
            .container {
                margin: 0;
                border-radius: 0;
            }

            .content {
                padding: 20px;
            }

            .button-group {
                flex-direction: column;
            }

            .fetch-btn, .post-btn, .refresh-btn {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üì∞ Financial Times RSS Manager</h1>
            <p>Fetch, preview, and publish Financial Times news to Facebook</p>
        </div>

        <div class="content">
            <div class="action-section">
                <h2 style="margin-bottom: 20px; color: #667eea;">Start by fetching latest news</h2>
                <p style="margin-bottom: 20px; color: #666;">Click the button below to fetch and analyze the latest Financial Times RSS feed</p>
                <button class="fetch-btn" id="fetchBtn">
                    üîÑ Fetch Latest News
                </button>
            </div>

            <div class="status" id="status"></div>

            <div class="loading" id="loading">
                <div class="spinner"></div>
                <div class="loading-text">Fetching and analyzing RSS feed...</div>
            </div>

            <div class="preview-section" id="previewSection">
                <div class="info-box" id="infoBox">
                    <p><strong>Source:</strong> <span id="sourceInfo">-</span></p>
                    <p><strong>Total Articles:</strong> <span id="totalArticles">-</span></p>
                    <p><strong>Selected Articles:</strong> <span id="selectedArticles">-</span></p>
                    <p><strong>Processed At:</strong> <span id="processedAt">-</span></p>
                </div>

                <div class="section-title">üìã Selected Articles</div>
                <div class="articles-container" id="articlesContainer"></div>

                <div class="post-preview">
                    <div class="preview-title">
                        <span>üìù</span>
                        <span>Facebook Post Preview</span>
                    </div>
                    <textarea id="postContent" class="post-textarea" placeholder="Generated post content will appear here..."></textarea>
                </div>

                <div class="button-group">
                    <button class="refresh-btn" id="refreshBtn">
                        üîÑ Regenerate Post
                    </button>
                    <button class="post-btn" id="postBtn">
                        üì§ Post to Facebook
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Replace with your n8n webhook URLs
        const N8N_FETCH_URL = 'https://a3g.app.n8n.cloud/webhook/fetch-rss-news';
        const N8N_POST_URL = 'https://a3g.app.n8n.cloud/webhook/post-rss-to-facebook';

        const fetchBtn = document.getElementById('fetchBtn');
        const refreshBtn = document.getElementById('refreshBtn');
        const postBtn = document.getElementById('postBtn');
        const status = document.getElementById('status');
        const loading = document.getElementById('loading');
        const previewSection = document.getElementById('previewSection');
        const articlesContainer = document.getElementById('articlesContainer');
        const postContent = document.getElementById('postContent');

        let currentNewsData = null;

        // Fetch RSS News
        fetchBtn.addEventListener('click', fetchNews);
        refreshBtn.addEventListener('click', fetchNews);

        async function fetchNews() {
            fetchBtn.disabled = true;
            refreshBtn.disabled = true;
            loading.classList.add('show');
            previewSection.classList.remove('show');
            status.style.display = 'none';

            try {
                console.log('Fetching RSS news from:', N8N_FETCH_URL);
                
                const response = await fetch(N8N_FETCH_URL, {
                    method: 'GET'
                });

                console.log('Response status:', response.status);

                const responseText = await response.text();
                console.log('Response text:', responseText);

                let result;
                try {
                    result = JSON.parse(responseText);
                    console.log('Parsed result:', result);
                } catch (parseError) {
                    console.error('JSON parse error:', parseError);
                    throw new Error('Invalid JSON response from server');
                }

                loading.classList.remove('show');

                if (response.ok && result) {
                    currentNewsData = result;
                    displayNewsData(result);
                    showStatus('‚úÖ News fetched successfully!', 'success');
                } else {
                    throw new Error(result.error || 'Failed to fetch news');
                }
            } catch (error) {
                console.error('Fetch error:', error);
                loading.classList.remove('show');
                showStatus('‚ùå Error: ' + error.message, 'error');
            } finally {
                fetchBtn.disabled = false;
                refreshBtn.disabled = false;
            }
        }

        function displayNewsData(data) {
            // Display info box
            document.getElementById('sourceInfo').textContent = data.source || 'Financial Times';
            document.getElementById('totalArticles').textContent = data.totalArticles || 0;
            document.getElementById('selectedArticles').textContent = data.selectedArticles?.length || 0;
            document.getElementById('processedAt').textContent = new Date(data.processedAt).toLocaleString();

            // Display articles
            articlesContainer.innerHTML = '';
            if (data.selectedArticles && data.selectedArticles.length > 0) {
                data.selectedArticles.forEach((article, index) => {
                    const articleCard = document.createElement('div');
                    articleCard.className = 'article-card';
                    articleCard.innerHTML = `
                        <div class="article-title">${index + 1}. ${article.title}</div>
                        <div class="article-desc">${article.description}</div>
                        <div class="article-link">üîó ${article.link}</div>
                        <div class="article-meta">
                            <span>üìä Score: ${article.importanceScore}</span>
                            <span>üìÖ ${new Date(article.pubDate).toLocaleString()}</span>
                            <span>üè∑Ô∏è ${article.category}</span>
                        </div>
                    `;
                    articlesContainer.appendChild(articleCard);
                });
            }

            // Display generated post
            postContent.value = data.generatedPost || data.fbPost || 'Post content not available';

            previewSection.classList.add('show');
        }

        // Post to Facebook
        postBtn.addEventListener('click', async () => {
            if (!currentNewsData) {
                showStatus('‚ùå Please fetch news first!', 'error');
                return;
            }

            if (!postContent.value.trim()) {
                showStatus('‚ùå Post content is empty!', 'error');
                return;
            }

            if (!confirm('Are you sure you want to post this to Facebook?')) {
                return;
            }

            postBtn.disabled = true;
            postBtn.textContent = 'Posting...';

            try {
                const response = await fetch(N8N_POST_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        message: postContent.value,
                        newsData: currentNewsData
                    })
                });

                const result = await response.json();

                if (response.ok) {
                    showStatus('‚úÖ Successfully posted to Facebook!', 'success');
                    setTimeout(() => {
                        postContent.value = '';
                        previewSection.classList.remove('show');
                        currentNewsData = null;
                    }, 2000);
                } else {
                    throw new Error(result.error || 'Post failed');
                }
            } catch (error) {
                console.error('Post error:', error);
                showStatus('‚ùå Failed to post: ' + error.message, 'error');
            } finally {
                postBtn.disabled = false;
                postBtn.textContent = 'üì§ Post to Facebook';
            }
        });

        function showStatus(message, type) {
            status.textContent = message;
            status.className = `status ${type}`;
            status.style.display = 'block';
            setTimeout(() => {
                status.style.display = 'none';
            }, 5000);
        }
    </script>
</body>
</html>
:root {
    --primary-color: #e91e63;
    --secondary-color: #ff6b9d;
    --accent-color: #ff1744;
    --text-color: #2c3e50;
    --bg-gradient: linear-gradient(135deg, #ff6b9d 0%, #ff8fab 50%, #ffa8c0 100%);
    --light-pink: #fff0f5;
    --deep-pink: #c2185b;
    --pink-shadow: rgba(255, 107, 157, 0.3);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: var(--text-color);
    padding-top: 70px;
    background: var(--light-pink);
}

/* Navigation */
.navbar {
    background: rgba(255, 107, 157, 0.98) !important;
    backdrop-filter: blur(10px);
    box-shadow: 0 2px 10px var(--pink-shadow);
}

.navbar-brand {
    font-weight: 700;
    color: white !important;
}

.nav-link {
    color: white !important;
    font-weight: 500;
    transition: color 0.3s ease;
}

.nav-link:hover {
    color: var(--light-pink) !important;
    transform: translateY(-2px);
}

/* Language Toggle */
.lang-toggle {
    background: var(--accent-color);
    border: none;
    color: white;
    padding: 8px 16px;
    border-radius: 25px;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(255, 23, 68, 0.3);
}

.lang-toggle:hover {
    background: #d50000;
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(255, 23, 68, 0.4);
}

/* Header Section */
.project-header {
    background: var(--bg-gradient);
    color: white;
    padding: 4rem 0 2rem;
    margin-bottom: 2rem;
    position: relative;
    overflow: hidden;
}

.project-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"><circle cx="200" cy="200" r="80" fill="rgba(255,255,255,0.1)"/><circle cx="800" cy="150" r="120" fill="rgba(255,255,255,0.05)"/><circle cx="500" cy="400" r="100" fill="rgba(255,255,255,0.08)"/></svg>');
    animation: float 15s ease-in-out infinite;
}

@keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-15px) rotate(180deg); }
}

.project-title {
    font-size: 3rem;
    font-weight: 700;
    margin-bottom: 1rem;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    position: relative;
    z-index: 2;
}

.project-subtitle {
    font-size: 1.2rem;
    opacity: 0.9;
    margin-bottom: 2rem;
    position: relative;
    z-index: 2;
}

.breadcrumb {
    background: rgba(255,255,255,0.15);
    border-radius: 10px;
    padding: 1rem;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255,255,255,0.2);
    position: relative;
    z-index: 2;
}

.breadcrumb-item a {
    color: white;
    text-decoration: none;
    transition: color 0.3s ease;
}

.breadcrumb-item a:hover {
    color: var(--light-pink);
}

.breadcrumb-item.active {
    color: rgba(255,255,255,0.8);
}

/* Back Button */
.back-btn {
    background: rgba(255,255,255,0.2);
    color: white;
    border: 2px solid rgba(255,255,255,0.3);
    padding: 10px 20px;
    border-radius: 25px;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    transition: all 0.3s ease;
    margin-bottom: 2rem;
    backdrop-filter: blur(10px);
}

.back-btn:hover {
    background: rgba(255,255,255,0.3);
    color: white;
    transform: translateX(-5px);
    box-shadow: 0 5px 15px var(--pink-shadow);
}

.back-btn i {
    margin-right: 0.5rem;
}

/* Content Sections */
.content-section {
    margin-bottom: 3rem;
    background: white;
    padding: 2rem;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(255, 107, 157, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.content-section:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 40px rgba(255, 107, 157, 0.15);
}

.section-title {
    font-size: 2rem;
    font-weight: 700;
    color: var(--primary-color);
    margin-bottom: 1.5rem;
    position: relative;
    padding-bottom: 0.5rem;
}

.section-title::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 60px;
    height: 3px;
    background: linear-gradient(90deg, var(--secondary-color), var(--accent-color));
    border-radius: 2px;
}

/* Image Gallery */
.image-gallery {
    margin-bottom: 3rem;
}

.gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-bottom: 2rem;
}

.gallery-item {
    position: relative;
    border-radius: 15px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(255, 107, 157, 0.15);
    transition: all 0.3s ease;
    cursor: pointer;
    border: 2px solid transparent;
}

.gallery-item:hover {
    transform: translateY(-10px);
    box-shadow: 0 20px 40px rgba(255, 107, 157, 0.25);
    border-color: var(--secondary-color);
}

.gallery-item img {
    width: 100%;
    height: 250px;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.gallery-item:hover img {
    transform: scale(1.05);
}

.gallery-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(233, 30, 99, 0.9));
    color: white;
    padding: 1.5rem;
    transform: translateY(100%);
    transition: transform 0.3s ease;
    backdrop-filter: blur(5px);
}

.gallery-item:hover .gallery-overlay {
    transform: translateY(0);
}

.gallery-overlay h5 {
    margin-bottom: 0.5rem;
    font-weight: 600;
}

.gallery-overlay p {
    margin: 0;
    opacity: 0.9;
    font-size: 0.9rem;
}

/* Modal for Image Zoom */
.modal-content {
    border: none;
    border-radius: 15px;
    overflow: hidden;
    box-shadow: 0 20px 60px rgba(255, 107, 157, 0.3);
}

.modal-header {
    background: var(--bg-gradient);
    color: white;
    border: none;
}

.modal-title {
    font-weight: 600;
}

.btn-close {
    filter: brightness(0) invert(1);
}

.modal-body {
    padding: 0;
}

.modal-body img {
    width: 100%;
    height: auto;
    display: block;
}

/* Cards and Info Boxes */
.info-card {
    background: white;
    border-radius: 15px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    box-shadow: 0 5px 20px rgba(255, 107, 157, 0.1);
    border-left: 4px solid var(--secondary-color);
    transition: all 0.3s ease;
}

.info-card:hover {
    transform: translateX(5px);
    box-shadow: 0 8px 25px rgba(255, 107, 157, 0.15);
}

.info-card h5 {
    color: var(--primary-color);
    margin-bottom: 1rem;
    font-weight: 600;
}

.info-card p {
    margin: 0;
    line-height: 1.6;
}

/* Buttons */
.btn-primary {
    background: var(--bg-gradient);
    border: none;
    border-radius: 25px;
    padding: 10px 25px;
    font-weight: 500;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px var(--pink-shadow);
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(255, 107, 157, 0.4);
}

.btn-outline-primary {
    border: 2px solid var(--secondary-color);
    color: var(--secondary-color);
    border-radius: 25px;
    padding: 10px 25px;
    font-weight: 500;
    transition: all 0.3s ease;
}

.btn-outline-primary:hover {
    background: var(--secondary-color);
    border-color: var(--secondary-color);
    transform: translateY(-2px);
    box-shadow: 0 5px 15px var(--pink-shadow);
}

/* Animations */
.fade-in {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.6s ease;
}

.fade-in.visible {
    opacity: 1;
    transform: translateY(0);
}

/* Tags and Labels */
.tag {
    display: inline-block;
    background: var(--bg-gradient);
    color: white;
    padding: 4px 12px;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: 500;
    margin: 2px;
    box-shadow: 0 2px 8px rgba(255, 107, 157, 0.2);
}

/* Progress Bars */
.progress {
    height: 8px;
    border-radius: 4px;
    background: rgba(255, 107, 157, 0.1);
}

.progress-bar {
    background: var(--bg-gradient);
    border-radius: 4px;
}

/* Alerts */
.alert-info {
    background: rgba(255, 107, 157, 0.1);
    border: 1px solid rgba(255, 107, 157, 0.2);
    color: var(--deep-pink);
    border-radius: 10px;
}

.alert-success {
    background: rgba(76, 175, 80, 0.1);
    border: 1px solid rgba(76, 175, 80, 0.2);
    color: #2e7d32;
    border-radius: 10px;
}

/* Responsive */
@media (max-width: 768px) {
    .project-title {
        font-size: 2rem;
    }

    .gallery-grid {
        grid-template-columns: 1fr;
    }

    .back-btn {
        width: 100%;
        justify-content: center;
    }

    .content-section {
        padding: 1.5rem;
        margin-bottom: 2rem;
    }

    .section-title {
        font-size: 1.5rem;
    }
}

@media (max-width: 576px) {
    .project-title {
        font-size: 1.8rem;
    }

    .project-subtitle {
        font-size: 1rem;
    }

    .content-section {
        padding: 1rem;
    }

    .gallery-item img {
        height: 200px;
    }

    .info-card {
        padding: 1rem;
    }
}
/* style3.css - Á≤âÁ¥ÖËâ≤Á≥ªÈÖçËâ≤ */

/* Á≤âÁ¥ÖËâ≤Á≥ªÈÖçËâ≤ËÆäÊï∏ */
:root {
    --primary-pink: #ff6b9d;
    --secondary-pink: #ffd3e0;
    --light-pink: #fff0f5;
    --deep-pink: #e91e63;
    --gradient-pink: linear-gradient(135deg, #ff6b9d 0%, #ff8fab 50%, #ffa8c0 100%);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Microsoft JhengHei', Arial, sans-serif;
    line-height: 1.6;
    color: #333;
    background: var(--light-pink);
}

/* Navigation */
.navbar {
    background: rgba(255, 107, 157, 0.95) !important;
    backdrop-filter: blur(10px);
    box-shadow: 0 2px 20px rgba(255, 107, 157, 0.3);
    transition: all 0.3s ease;
}

.navbar-brand {
    font-weight: bold;
    font-size: 1.5rem;
    color: white !important;
}

.navbar-nav .nav-link {
    color: white !important;
    font-weight: 500;
    margin: 0 10px;
    transition: all 0.3s ease;
}

.navbar-nav .nav-link:hover {
    color: var(--secondary-pink) !important;
    transform: translateY(-2px);
}

/* Hero Section */
.hero {
    background: var(--gradient-pink);
    min-height: 100vh;
    display: flex;
    align-items: center;
    color: white;
    position: relative;
    overflow: hidden;
}

.hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"><circle cx="200" cy="200" r="100" fill="rgba(255,255,255,0.1)"/><circle cx="800" cy="300" r="150" fill="rgba(255,255,255,0.05)"/><circle cx="600" cy="700" r="120" fill="rgba(255,255,255,0.08)"/></svg>');
    animation: float 20s ease-in-out infinite;
}

@keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(180deg); }
}

.hero-content {
    position: relative;
    z-index: 2;
}

.hero h1 {
    font-size: 3.5rem;
    font-weight: bold;
    margin-bottom: 1rem;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

.hero .subtitle {
    font-size: 1.3rem;
    margin-bottom: 2rem;
    opacity: 0.9;
}

.profile-img {
    width: 300px;
    height: 300px;
    border-radius: 50%;
    object-fit: cover;
    border: 6px solid white;
    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
    transition: transform 0.3s ease;
}

.profile-img:hover {
    transform: scale(1.05);
}

/* Sections */
.section {
    padding: 80px 0;
}

.section-title {
    text-align: center;
    font-size: 2.5rem;
    margin-bottom: 3rem;
    color: var(--deep-pink);
    font-weight: bold;
}

.bg-light {
    background: var(--secondary-pink) !important;
}

/* Cards */
.card {
    border: none;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(255, 107, 157, 0.2);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    background: white;
}

.card:hover {
    transform: translateY(-10px);
    box-shadow: 0 20px 40px rgba(255, 107, 157, 0.3);
}

/* Filter Buttons */
.filter-buttons {
    text-align: center;
    margin-bottom: 3rem;
}

.filter-btn {
    background: white;
    color: var(--primary-pink);
    border: 2px solid var(--primary-pink);
    padding: 10px 25px;
    margin: 5px;
    border-radius: 25px;
    font-weight: 500;
    transition: all 0.3s ease;
}

.filter-btn:hover,
.filter-btn.active {
    background: var(--primary-pink);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(255, 107, 157, 0.4);
}

/* Project Grid */
.project-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
}

.project-card {
    background: white;
    padding: 2rem;
    border-radius: 15px;
    box-shadow: 0 5px 20px rgba(255, 107, 157, 0.15);
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
    overflow: hidden;
}

.project-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background: var(--gradient-pink);
}

.project-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 15px 35px rgba(255, 107, 157, 0.25);
}

.project-number {
    background: var(--gradient-pink);
    color: white;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    margin-bottom: 1rem;
}

.project-card h5 {
    color: var(--deep-pink);
    margin-bottom: 1rem;
    font-weight: bold;
}

/* Contact Section */
.contact-info {
    background: white;
    padding: 3rem;
    border-radius: 20px;
    box-shadow: 0 10px 30px rgba(255, 107, 157, 0.2);
}

.contact-item {
    display: flex;
    align-items: center;
    margin-bottom: 2rem;
    padding: 1rem;
    background: var(--light-pink);
    border-radius: 10px;
    transition: transform 0.3s ease;
}

.contact-item:hover {
    transform: translateX(10px);
}

.contact-item i {
    font-size: 2rem;
    color: var(--primary-pink);
    margin-right: 1rem;
    width: 50px;
}

.contact-item a {
    color: var(--deep-pink) !important;
    text-decoration: none;
}

.contact-item a:hover {
    color: var(--primary-pink) !important;
}

/* Footer */
.footer {
    background: var(--deep-pink);
    color: white;
    text-align: center;
    padding: 2rem 0;
}

/* Animations */
.fade-in {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.8s ease;
}

.fade-in.visible {
    opacity: 1;
    transform: translateY(0);
}

/* Responsive Design */
@media (max-width: 768px) {
    .hero h1 {
        font-size: 2.5rem;
    }
    
    .profile-img {
        width: 250px;
        height: 250px;
    }
    
    .project-grid {
        grid-template-columns: 1fr;
    }
    
    .section-title {
        font-size: 2rem;
    }
    
    .filter-btn {
        padding: 8px 20px;
        font-size: 0.9rem;
    }
    
    .project-card {
        padding: 1.5rem;
    }
    
    .contact-info {
        padding: 2rem;
    }
}

@media (max-width: 576px) {
    .hero h1 {
        font-size: 2rem;
    }
    
    .hero .subtitle {
        font-size: 1.1rem;
    }
    
    .section {
        padding: 60px 0;
    }
    
    .profile-img {
        width: 200px;
        height: 200px;
    }
    
    .project-card {
        padding: 1.2rem;
    }
    
    .contact-info {
        padding: 1.5rem;
    }
    
    .contact-item {
        flex-direction: column;
        text-align: center;
    }
    
    .contact-item i {
        margin-right: 0;
        margin-bottom: 0.5rem;
    }
}
